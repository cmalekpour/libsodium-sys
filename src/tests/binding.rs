/* automatically generated by rust-bindgen */

#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl <T> __BindgenUnionField<T> {
    #[inline]
    pub fn new() -> Self { __BindgenUnionField(::std::marker::PhantomData) }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T { ::std::mem::transmute(self) }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T { ::std::mem::transmute(self) }
}
impl <T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self { Self::new() }
}
impl <T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self { Self::new() }
}
impl <T> ::std::marker::Copy for __BindgenUnionField<T> { }
impl <T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
pub const SODIUM_VERSION_STRING: &'static [u8; 7usize] = b"1.0.12\x00";
pub const SODIUM_LIBRARY_VERSION_MAJOR: ::std::os::raw::c_uint = 9;
pub const SODIUM_LIBRARY_VERSION_MINOR: ::std::os::raw::c_uint = 4;
pub const __WORDSIZE: ::std::os::raw::c_uint = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: ::std::os::raw::c_uint = 0;
pub const __DARWIN_ONLY_VERS_1050: ::std::os::raw::c_uint = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: ::std::os::raw::c_uint = 1;
pub const __DARWIN_UNIX03: ::std::os::raw::c_uint = 1;
pub const __DARWIN_64_BIT_INO_T: ::std::os::raw::c_uint = 1;
pub const __DARWIN_VERS_1050: ::std::os::raw::c_uint = 1;
pub const __DARWIN_NON_CANCELABLE: ::std::os::raw::c_uint = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &'static [u8; 9usize] = b"$INODE64\x00";
pub const __DARWIN_SUF_1050: &'static [u8; 6usize] = b"$1050\x00";
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\x00";
pub const __DARWIN_C_ANSI: ::std::os::raw::c_uint = 4096;
pub const __DARWIN_C_FULL: ::std::os::raw::c_uint = 900000;
pub const __DARWIN_C_LEVEL: ::std::os::raw::c_uint = 900000;
pub const __STDC_WANT_LIB_EXT1__: ::std::os::raw::c_uint = 1;
pub const _DARWIN_FEATURE_64_BIT_INODE: ::std::os::raw::c_uint = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: ::std::os::raw::c_uint = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: ::std::os::raw::c_uint = 3;
pub const __PTHREAD_SIZE__: ::std::os::raw::c_uint = 8176;
pub const __PTHREAD_ATTR_SIZE__: ::std::os::raw::c_uint = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: ::std::os::raw::c_uint = 8;
pub const __PTHREAD_MUTEX_SIZE__: ::std::os::raw::c_uint = 56;
pub const __PTHREAD_CONDATTR_SIZE__: ::std::os::raw::c_uint = 8;
pub const __PTHREAD_COND_SIZE__: ::std::os::raw::c_uint = 40;
pub const __PTHREAD_ONCE_SIZE__: ::std::os::raw::c_uint = 8;
pub const __PTHREAD_RWLOCK_SIZE__: ::std::os::raw::c_uint = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: ::std::os::raw::c_uint = 16;
pub const INT8_MAX: ::std::os::raw::c_uint = 127;
pub const INT16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const INT64_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const INT8_MIN: ::std::os::raw::c_int = -128;
pub const INT16_MIN: ::std::os::raw::c_int = -32768;
pub const INT32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT64_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const UINT8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const UINT64_MAX: ::std::os::raw::c_int = -1;
pub const INT_LEAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_LEAST16_MIN: ::std::os::raw::c_int = -32768;
pub const INT_LEAST32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT_LEAST64_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_LEAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_LEAST16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT_LEAST32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const INT_LEAST64_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINT_LEAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_LEAST16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT_LEAST32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const UINT_LEAST64_MAX: ::std::os::raw::c_int = -1;
pub const INT_FAST8_MIN: ::std::os::raw::c_int = -128;
pub const INT_FAST16_MIN: ::std::os::raw::c_int = -32768;
pub const INT_FAST32_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT_FAST64_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INT_FAST8_MAX: ::std::os::raw::c_uint = 127;
pub const INT_FAST16_MAX: ::std::os::raw::c_uint = 32767;
pub const INT_FAST32_MAX: ::std::os::raw::c_uint = 2147483647;
pub const INT_FAST64_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINT_FAST8_MAX: ::std::os::raw::c_uint = 255;
pub const UINT_FAST16_MAX: ::std::os::raw::c_uint = 65535;
pub const UINT_FAST32_MAX: ::std::os::raw::c_uint = 4294967295;
pub const UINT_FAST64_MAX: ::std::os::raw::c_int = -1;
pub const INTPTR_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INTPTR_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINTPTR_MAX: ::std::os::raw::c_int = -1;
pub const INTMAX_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const INTMAX_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const UINTMAX_MAX: ::std::os::raw::c_int = -1;
pub const PTRDIFF_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const PTRDIFF_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const SIZE_MAX: ::std::os::raw::c_int = -1;
pub const RSIZE_MAX: ::std::os::raw::c_int = -1;
pub const WINT_MIN: ::std::os::raw::c_int = -2147483648;
pub const WINT_MAX: ::std::os::raw::c_uint = 2147483647;
pub const SIG_ATOMIC_MIN: ::std::os::raw::c_int = -2147483648;
pub const SIG_ATOMIC_MAX: ::std::os::raw::c_uint = 2147483647;
pub const __MAC_10_0: ::std::os::raw::c_uint = 1000;
pub const __MAC_10_1: ::std::os::raw::c_uint = 1010;
pub const __MAC_10_2: ::std::os::raw::c_uint = 1020;
pub const __MAC_10_3: ::std::os::raw::c_uint = 1030;
pub const __MAC_10_4: ::std::os::raw::c_uint = 1040;
pub const __MAC_10_5: ::std::os::raw::c_uint = 1050;
pub const __MAC_10_6: ::std::os::raw::c_uint = 1060;
pub const __MAC_10_7: ::std::os::raw::c_uint = 1070;
pub const __MAC_10_8: ::std::os::raw::c_uint = 1080;
pub const __MAC_10_9: ::std::os::raw::c_uint = 1090;
pub const __MAC_10_10: ::std::os::raw::c_uint = 101000;
pub const __MAC_10_10_2: ::std::os::raw::c_uint = 101002;
pub const __MAC_10_10_3: ::std::os::raw::c_uint = 101003;
pub const __MAC_10_11: ::std::os::raw::c_uint = 101100;
pub const __MAC_10_11_2: ::std::os::raw::c_uint = 101102;
pub const __MAC_10_11_3: ::std::os::raw::c_uint = 101103;
pub const __MAC_10_11_4: ::std::os::raw::c_uint = 101104;
pub const __MAC_10_12: ::std::os::raw::c_uint = 101200;
pub const __MAC_10_12_1: ::std::os::raw::c_uint = 101201;
pub const __MAC_10_12_2: ::std::os::raw::c_uint = 101202;
pub const __IPHONE_2_0: ::std::os::raw::c_uint = 20000;
pub const __IPHONE_2_1: ::std::os::raw::c_uint = 20100;
pub const __IPHONE_2_2: ::std::os::raw::c_uint = 20200;
pub const __IPHONE_3_0: ::std::os::raw::c_uint = 30000;
pub const __IPHONE_3_1: ::std::os::raw::c_uint = 30100;
pub const __IPHONE_3_2: ::std::os::raw::c_uint = 30200;
pub const __IPHONE_4_0: ::std::os::raw::c_uint = 40000;
pub const __IPHONE_4_1: ::std::os::raw::c_uint = 40100;
pub const __IPHONE_4_2: ::std::os::raw::c_uint = 40200;
pub const __IPHONE_4_3: ::std::os::raw::c_uint = 40300;
pub const __IPHONE_5_0: ::std::os::raw::c_uint = 50000;
pub const __IPHONE_5_1: ::std::os::raw::c_uint = 50100;
pub const __IPHONE_6_0: ::std::os::raw::c_uint = 60000;
pub const __IPHONE_6_1: ::std::os::raw::c_uint = 60100;
pub const __IPHONE_7_0: ::std::os::raw::c_uint = 70000;
pub const __IPHONE_7_1: ::std::os::raw::c_uint = 70100;
pub const __IPHONE_8_0: ::std::os::raw::c_uint = 80000;
pub const __IPHONE_8_1: ::std::os::raw::c_uint = 80100;
pub const __IPHONE_8_2: ::std::os::raw::c_uint = 80200;
pub const __IPHONE_8_3: ::std::os::raw::c_uint = 80300;
pub const __IPHONE_8_4: ::std::os::raw::c_uint = 80400;
pub const __IPHONE_9_0: ::std::os::raw::c_uint = 90000;
pub const __IPHONE_9_1: ::std::os::raw::c_uint = 90100;
pub const __IPHONE_9_2: ::std::os::raw::c_uint = 90200;
pub const __IPHONE_9_3: ::std::os::raw::c_uint = 90300;
pub const __IPHONE_10_0: ::std::os::raw::c_uint = 100000;
pub const __IPHONE_10_1: ::std::os::raw::c_uint = 100100;
pub const __IPHONE_10_2: ::std::os::raw::c_uint = 100200;
pub const __TVOS_9_0: ::std::os::raw::c_uint = 90000;
pub const __TVOS_9_1: ::std::os::raw::c_uint = 90100;
pub const __TVOS_9_2: ::std::os::raw::c_uint = 90200;
pub const __TVOS_10_0: ::std::os::raw::c_uint = 100000;
pub const __TVOS_10_0_1: ::std::os::raw::c_uint = 100001;
pub const __TVOS_10_1: ::std::os::raw::c_uint = 100100;
pub const __WATCHOS_1_0: ::std::os::raw::c_uint = 10000;
pub const __WATCHOS_2_0: ::std::os::raw::c_uint = 20000;
pub const __WATCHOS_3_0: ::std::os::raw::c_uint = 30000;
pub const __WATCHOS_3_1: ::std::os::raw::c_uint = 30100;
pub const __WATCHOS_3_1_1: ::std::os::raw::c_uint = 30101;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: ::std::os::raw::c_uint = 101202;
pub const __DARWIN_WCHAR_MIN: ::std::os::raw::c_int = -2147483648;
pub const _FORTIFY_SOURCE: ::std::os::raw::c_uint = 2;
pub const __DARWIN_NSIG: ::std::os::raw::c_uint = 32;
pub const NSIG: ::std::os::raw::c_uint = 32;
pub const _I386_SIGNAL_H_: ::std::os::raw::c_uint = 1;
pub const SIGHUP: ::std::os::raw::c_uint = 1;
pub const SIGINT: ::std::os::raw::c_uint = 2;
pub const SIGQUIT: ::std::os::raw::c_uint = 3;
pub const SIGILL: ::std::os::raw::c_uint = 4;
pub const SIGTRAP: ::std::os::raw::c_uint = 5;
pub const SIGABRT: ::std::os::raw::c_uint = 6;
pub const SIGIOT: ::std::os::raw::c_uint = 6;
pub const SIGEMT: ::std::os::raw::c_uint = 7;
pub const SIGFPE: ::std::os::raw::c_uint = 8;
pub const SIGKILL: ::std::os::raw::c_uint = 9;
pub const SIGBUS: ::std::os::raw::c_uint = 10;
pub const SIGSEGV: ::std::os::raw::c_uint = 11;
pub const SIGSYS: ::std::os::raw::c_uint = 12;
pub const SIGPIPE: ::std::os::raw::c_uint = 13;
pub const SIGALRM: ::std::os::raw::c_uint = 14;
pub const SIGTERM: ::std::os::raw::c_uint = 15;
pub const SIGURG: ::std::os::raw::c_uint = 16;
pub const SIGSTOP: ::std::os::raw::c_uint = 17;
pub const SIGTSTP: ::std::os::raw::c_uint = 18;
pub const SIGCONT: ::std::os::raw::c_uint = 19;
pub const SIGCHLD: ::std::os::raw::c_uint = 20;
pub const SIGTTIN: ::std::os::raw::c_uint = 21;
pub const SIGTTOU: ::std::os::raw::c_uint = 22;
pub const SIGIO: ::std::os::raw::c_uint = 23;
pub const SIGXCPU: ::std::os::raw::c_uint = 24;
pub const SIGXFSZ: ::std::os::raw::c_uint = 25;
pub const SIGVTALRM: ::std::os::raw::c_uint = 26;
pub const SIGPROF: ::std::os::raw::c_uint = 27;
pub const SIGWINCH: ::std::os::raw::c_uint = 28;
pub const SIGINFO: ::std::os::raw::c_uint = 29;
pub const SIGUSR1: ::std::os::raw::c_uint = 30;
pub const SIGUSR2: ::std::os::raw::c_uint = 31;
pub const FP_PREC_24B: ::std::os::raw::c_uint = 0;
pub const FP_PREC_53B: ::std::os::raw::c_uint = 2;
pub const FP_PREC_64B: ::std::os::raw::c_uint = 3;
pub const FP_RND_NEAR: ::std::os::raw::c_uint = 0;
pub const FP_RND_DOWN: ::std::os::raw::c_uint = 1;
pub const FP_RND_UP: ::std::os::raw::c_uint = 2;
pub const FP_CHOP: ::std::os::raw::c_uint = 3;
pub const FP_STATE_BYTES: ::std::os::raw::c_uint = 512;
pub const SIGEV_NONE: ::std::os::raw::c_uint = 0;
pub const SIGEV_SIGNAL: ::std::os::raw::c_uint = 1;
pub const SIGEV_THREAD: ::std::os::raw::c_uint = 3;
pub const ILL_NOOP: ::std::os::raw::c_uint = 0;
pub const ILL_ILLOPC: ::std::os::raw::c_uint = 1;
pub const ILL_ILLTRP: ::std::os::raw::c_uint = 2;
pub const ILL_PRVOPC: ::std::os::raw::c_uint = 3;
pub const ILL_ILLOPN: ::std::os::raw::c_uint = 4;
pub const ILL_ILLADR: ::std::os::raw::c_uint = 5;
pub const ILL_PRVREG: ::std::os::raw::c_uint = 6;
pub const ILL_COPROC: ::std::os::raw::c_uint = 7;
pub const ILL_BADSTK: ::std::os::raw::c_uint = 8;
pub const FPE_NOOP: ::std::os::raw::c_uint = 0;
pub const FPE_FLTDIV: ::std::os::raw::c_uint = 1;
pub const FPE_FLTOVF: ::std::os::raw::c_uint = 2;
pub const FPE_FLTUND: ::std::os::raw::c_uint = 3;
pub const FPE_FLTRES: ::std::os::raw::c_uint = 4;
pub const FPE_FLTINV: ::std::os::raw::c_uint = 5;
pub const FPE_FLTSUB: ::std::os::raw::c_uint = 6;
pub const FPE_INTDIV: ::std::os::raw::c_uint = 7;
pub const FPE_INTOVF: ::std::os::raw::c_uint = 8;
pub const SEGV_NOOP: ::std::os::raw::c_uint = 0;
pub const SEGV_MAPERR: ::std::os::raw::c_uint = 1;
pub const SEGV_ACCERR: ::std::os::raw::c_uint = 2;
pub const BUS_NOOP: ::std::os::raw::c_uint = 0;
pub const BUS_ADRALN: ::std::os::raw::c_uint = 1;
pub const BUS_ADRERR: ::std::os::raw::c_uint = 2;
pub const BUS_OBJERR: ::std::os::raw::c_uint = 3;
pub const TRAP_BRKPT: ::std::os::raw::c_uint = 1;
pub const TRAP_TRACE: ::std::os::raw::c_uint = 2;
pub const CLD_NOOP: ::std::os::raw::c_uint = 0;
pub const CLD_EXITED: ::std::os::raw::c_uint = 1;
pub const CLD_KILLED: ::std::os::raw::c_uint = 2;
pub const CLD_DUMPED: ::std::os::raw::c_uint = 3;
pub const CLD_TRAPPED: ::std::os::raw::c_uint = 4;
pub const CLD_STOPPED: ::std::os::raw::c_uint = 5;
pub const CLD_CONTINUED: ::std::os::raw::c_uint = 6;
pub const POLL_IN: ::std::os::raw::c_uint = 1;
pub const POLL_OUT: ::std::os::raw::c_uint = 2;
pub const POLL_MSG: ::std::os::raw::c_uint = 3;
pub const POLL_ERR: ::std::os::raw::c_uint = 4;
pub const POLL_PRI: ::std::os::raw::c_uint = 5;
pub const POLL_HUP: ::std::os::raw::c_uint = 6;
pub const SA_ONSTACK: ::std::os::raw::c_uint = 1;
pub const SA_RESTART: ::std::os::raw::c_uint = 2;
pub const SA_RESETHAND: ::std::os::raw::c_uint = 4;
pub const SA_NOCLDSTOP: ::std::os::raw::c_uint = 8;
pub const SA_NODEFER: ::std::os::raw::c_uint = 16;
pub const SA_NOCLDWAIT: ::std::os::raw::c_uint = 32;
pub const SA_SIGINFO: ::std::os::raw::c_uint = 64;
pub const SA_USERTRAMP: ::std::os::raw::c_uint = 256;
pub const SA_64REGSET: ::std::os::raw::c_uint = 512;
pub const SA_USERSPACE_MASK: ::std::os::raw::c_uint = 127;
pub const SIG_BLOCK: ::std::os::raw::c_uint = 1;
pub const SIG_UNBLOCK: ::std::os::raw::c_uint = 2;
pub const SIG_SETMASK: ::std::os::raw::c_uint = 3;
pub const SI_USER: ::std::os::raw::c_uint = 65537;
pub const SI_QUEUE: ::std::os::raw::c_uint = 65538;
pub const SI_TIMER: ::std::os::raw::c_uint = 65539;
pub const SI_ASYNCIO: ::std::os::raw::c_uint = 65540;
pub const SI_MESGQ: ::std::os::raw::c_uint = 65541;
pub const SS_ONSTACK: ::std::os::raw::c_uint = 1;
pub const SS_DISABLE: ::std::os::raw::c_uint = 4;
pub const MINSIGSTKSZ: ::std::os::raw::c_uint = 32768;
pub const SIGSTKSZ: ::std::os::raw::c_uint = 131072;
pub const SV_ONSTACK: ::std::os::raw::c_uint = 1;
pub const SV_INTERRUPT: ::std::os::raw::c_uint = 2;
pub const SV_RESETHAND: ::std::os::raw::c_uint = 4;
pub const SV_NODEFER: ::std::os::raw::c_uint = 16;
pub const SV_NOCLDSTOP: ::std::os::raw::c_uint = 8;
pub const SV_SIGINFO: ::std::os::raw::c_uint = 64;
pub const PRIO_PROCESS: ::std::os::raw::c_uint = 0;
pub const PRIO_PGRP: ::std::os::raw::c_uint = 1;
pub const PRIO_USER: ::std::os::raw::c_uint = 2;
pub const PRIO_DARWIN_THREAD: ::std::os::raw::c_uint = 3;
pub const PRIO_DARWIN_PROCESS: ::std::os::raw::c_uint = 4;
pub const PRIO_MIN: ::std::os::raw::c_int = -20;
pub const PRIO_MAX: ::std::os::raw::c_uint = 20;
pub const PRIO_DARWIN_BG: ::std::os::raw::c_uint = 4096;
pub const PRIO_DARWIN_NONUI: ::std::os::raw::c_uint = 4097;
pub const RUSAGE_SELF: ::std::os::raw::c_uint = 0;
pub const RUSAGE_CHILDREN: ::std::os::raw::c_int = -1;
pub const RUSAGE_INFO_V0: ::std::os::raw::c_uint = 0;
pub const RUSAGE_INFO_V1: ::std::os::raw::c_uint = 1;
pub const RUSAGE_INFO_V2: ::std::os::raw::c_uint = 2;
pub const RUSAGE_INFO_V3: ::std::os::raw::c_uint = 3;
pub const RUSAGE_INFO_CURRENT: ::std::os::raw::c_uint = 3;
pub const RLIMIT_CPU: ::std::os::raw::c_uint = 0;
pub const RLIMIT_FSIZE: ::std::os::raw::c_uint = 1;
pub const RLIMIT_DATA: ::std::os::raw::c_uint = 2;
pub const RLIMIT_STACK: ::std::os::raw::c_uint = 3;
pub const RLIMIT_CORE: ::std::os::raw::c_uint = 4;
pub const RLIMIT_AS: ::std::os::raw::c_uint = 5;
pub const RLIMIT_RSS: ::std::os::raw::c_uint = 5;
pub const RLIMIT_MEMLOCK: ::std::os::raw::c_uint = 6;
pub const RLIMIT_NPROC: ::std::os::raw::c_uint = 7;
pub const RLIMIT_NOFILE: ::std::os::raw::c_uint = 8;
pub const RLIM_NLIMITS: ::std::os::raw::c_uint = 9;
pub const _RLIMIT_POSIX_FLAG: ::std::os::raw::c_uint = 4096;
pub const RLIMIT_WAKEUPS_MONITOR: ::std::os::raw::c_uint = 1;
pub const RLIMIT_CPU_USAGE_MONITOR: ::std::os::raw::c_uint = 2;
pub const RLIMIT_THREAD_CPULIMITS: ::std::os::raw::c_uint = 3;
pub const WAKEMON_ENABLE: ::std::os::raw::c_uint = 1;
pub const WAKEMON_DISABLE: ::std::os::raw::c_uint = 2;
pub const WAKEMON_GET_PARAMS: ::std::os::raw::c_uint = 4;
pub const WAKEMON_SET_DEFAULTS: ::std::os::raw::c_uint = 8;
pub const WAKEMON_MAKE_FATAL: ::std::os::raw::c_uint = 16;
pub const CPUMON_MAKE_FATAL: ::std::os::raw::c_uint = 4096;
pub const IOPOL_TYPE_DISK: ::std::os::raw::c_uint = 0;
pub const IOPOL_SCOPE_PROCESS: ::std::os::raw::c_uint = 0;
pub const IOPOL_SCOPE_THREAD: ::std::os::raw::c_uint = 1;
pub const IOPOL_SCOPE_DARWIN_BG: ::std::os::raw::c_uint = 2;
pub const IOPOL_DEFAULT: ::std::os::raw::c_uint = 0;
pub const IOPOL_IMPORTANT: ::std::os::raw::c_uint = 1;
pub const IOPOL_PASSIVE: ::std::os::raw::c_uint = 2;
pub const IOPOL_THROTTLE: ::std::os::raw::c_uint = 3;
pub const IOPOL_UTILITY: ::std::os::raw::c_uint = 4;
pub const IOPOL_STANDARD: ::std::os::raw::c_uint = 5;
pub const IOPOL_APPLICATION: ::std::os::raw::c_uint = 5;
pub const IOPOL_NORMAL: ::std::os::raw::c_uint = 1;
pub const WNOHANG: ::std::os::raw::c_uint = 1;
pub const WUNTRACED: ::std::os::raw::c_uint = 2;
pub const WCOREFLAG: ::std::os::raw::c_uint = 128;
pub const _WSTOPPED: ::std::os::raw::c_uint = 127;
pub const WEXITED: ::std::os::raw::c_uint = 4;
pub const WSTOPPED: ::std::os::raw::c_uint = 8;
pub const WCONTINUED: ::std::os::raw::c_uint = 16;
pub const WNOWAIT: ::std::os::raw::c_uint = 32;
pub const WAIT_ANY: ::std::os::raw::c_int = -1;
pub const WAIT_MYPGRP: ::std::os::raw::c_uint = 0;
pub const _QUAD_HIGHWORD: ::std::os::raw::c_uint = 1;
pub const _QUAD_LOWWORD: ::std::os::raw::c_uint = 0;
pub const __DARWIN_LITTLE_ENDIAN: ::std::os::raw::c_uint = 1234;
pub const __DARWIN_BIG_ENDIAN: ::std::os::raw::c_uint = 4321;
pub const __DARWIN_PDP_ENDIAN: ::std::os::raw::c_uint = 3412;
pub const __DARWIN_BYTE_ORDER: ::std::os::raw::c_uint = 1234;
pub const LITTLE_ENDIAN: ::std::os::raw::c_uint = 1234;
pub const BIG_ENDIAN: ::std::os::raw::c_uint = 4321;
pub const PDP_ENDIAN: ::std::os::raw::c_uint = 3412;
pub const BYTE_ORDER: ::std::os::raw::c_uint = 1234;
pub const EXIT_FAILURE: ::std::os::raw::c_uint = 1;
pub const EXIT_SUCCESS: ::std::os::raw::c_uint = 0;
pub const RAND_MAX: ::std::os::raw::c_uint = 2147483647;
pub const RENAME_SECLUDE: ::std::os::raw::c_uint = 1;
pub const RENAME_SWAP: ::std::os::raw::c_uint = 2;
pub const RENAME_EXCL: ::std::os::raw::c_uint = 4;
pub const __SLBF: ::std::os::raw::c_uint = 1;
pub const __SNBF: ::std::os::raw::c_uint = 2;
pub const __SRD: ::std::os::raw::c_uint = 4;
pub const __SWR: ::std::os::raw::c_uint = 8;
pub const __SRW: ::std::os::raw::c_uint = 16;
pub const __SEOF: ::std::os::raw::c_uint = 32;
pub const __SERR: ::std::os::raw::c_uint = 64;
pub const __SMBF: ::std::os::raw::c_uint = 128;
pub const __SAPP: ::std::os::raw::c_uint = 256;
pub const __SSTR: ::std::os::raw::c_uint = 512;
pub const __SOPT: ::std::os::raw::c_uint = 1024;
pub const __SNPT: ::std::os::raw::c_uint = 2048;
pub const __SOFF: ::std::os::raw::c_uint = 4096;
pub const __SMOD: ::std::os::raw::c_uint = 8192;
pub const __SALC: ::std::os::raw::c_uint = 16384;
pub const __SIGN: ::std::os::raw::c_uint = 32768;
pub const _IOFBF: ::std::os::raw::c_uint = 0;
pub const _IOLBF: ::std::os::raw::c_uint = 1;
pub const _IONBF: ::std::os::raw::c_uint = 2;
pub const BUFSIZ: ::std::os::raw::c_uint = 1024;
pub const EOF: ::std::os::raw::c_int = -1;
pub const FOPEN_MAX: ::std::os::raw::c_uint = 20;
pub const FILENAME_MAX: ::std::os::raw::c_uint = 1024;
pub const P_tmpdir: &'static [u8; 10usize] = b"/var/tmp/\x00";
pub const L_tmpnam: ::std::os::raw::c_uint = 1024;
pub const TMP_MAX: ::std::os::raw::c_uint = 308915776;
pub const SEEK_SET: ::std::os::raw::c_uint = 0;
pub const SEEK_CUR: ::std::os::raw::c_uint = 1;
pub const SEEK_END: ::std::os::raw::c_uint = 2;
pub const L_ctermid: ::std::os::raw::c_uint = 1024;
pub const __CTERMID_DEFINED: ::std::os::raw::c_uint = 1;
pub const _USE_FORTIFY_LEVEL: ::std::os::raw::c_uint = 2;
pub const __DARWIN_FD_SETSIZE: ::std::os::raw::c_uint = 1024;
pub const __DARWIN_NBBY: ::std::os::raw::c_uint = 8;
pub const NBBY: ::std::os::raw::c_uint = 8;
pub const FD_SETSIZE: ::std::os::raw::c_uint = 1024;
pub const __DARWIN_CLK_TCK: ::std::os::raw::c_uint = 100;
pub const CHAR_BIT: ::std::os::raw::c_uint = 8;
pub const MB_LEN_MAX: ::std::os::raw::c_uint = 6;
pub const CLK_TCK: ::std::os::raw::c_uint = 100;
pub const SCHAR_MAX: ::std::os::raw::c_uint = 127;
pub const SCHAR_MIN: ::std::os::raw::c_int = -128;
pub const UCHAR_MAX: ::std::os::raw::c_uint = 255;
pub const CHAR_MAX: ::std::os::raw::c_uint = 127;
pub const CHAR_MIN: ::std::os::raw::c_int = -128;
pub const USHRT_MAX: ::std::os::raw::c_uint = 65535;
pub const SHRT_MAX: ::std::os::raw::c_uint = 32767;
pub const SHRT_MIN: ::std::os::raw::c_int = -32768;
pub const UINT_MAX: ::std::os::raw::c_uint = 4294967295;
pub const INT_MAX: ::std::os::raw::c_uint = 2147483647;
pub const INT_MIN: ::std::os::raw::c_int = -2147483648;
pub const ULONG_MAX: ::std::os::raw::c_int = -1;
pub const LONG_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const LONG_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const ULLONG_MAX: ::std::os::raw::c_int = -1;
pub const LLONG_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const LLONG_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const LONG_BIT: ::std::os::raw::c_uint = 64;
pub const SSIZE_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const WORD_BIT: ::std::os::raw::c_uint = 32;
pub const SIZE_T_MAX: ::std::os::raw::c_int = -1;
pub const UQUAD_MAX: ::std::os::raw::c_int = -1;
pub const QUAD_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const QUAD_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const ARG_MAX: ::std::os::raw::c_uint = 262144;
pub const CHILD_MAX: ::std::os::raw::c_uint = 266;
pub const GID_MAX: ::std::os::raw::c_uint = 2147483647;
pub const LINK_MAX: ::std::os::raw::c_uint = 32767;
pub const MAX_CANON: ::std::os::raw::c_uint = 1024;
pub const MAX_INPUT: ::std::os::raw::c_uint = 1024;
pub const NAME_MAX: ::std::os::raw::c_uint = 255;
pub const NGROUPS_MAX: ::std::os::raw::c_uint = 16;
pub const UID_MAX: ::std::os::raw::c_uint = 2147483647;
pub const OPEN_MAX: ::std::os::raw::c_uint = 10240;
pub const PATH_MAX: ::std::os::raw::c_uint = 1024;
pub const PIPE_BUF: ::std::os::raw::c_uint = 512;
pub const BC_BASE_MAX: ::std::os::raw::c_uint = 99;
pub const BC_DIM_MAX: ::std::os::raw::c_uint = 2048;
pub const BC_SCALE_MAX: ::std::os::raw::c_uint = 99;
pub const BC_STRING_MAX: ::std::os::raw::c_uint = 1000;
pub const CHARCLASS_NAME_MAX: ::std::os::raw::c_uint = 14;
pub const COLL_WEIGHTS_MAX: ::std::os::raw::c_uint = 2;
pub const EQUIV_CLASS_MAX: ::std::os::raw::c_uint = 2;
pub const EXPR_NEST_MAX: ::std::os::raw::c_uint = 32;
pub const LINE_MAX: ::std::os::raw::c_uint = 2048;
pub const RE_DUP_MAX: ::std::os::raw::c_uint = 255;
pub const NZERO: ::std::os::raw::c_uint = 20;
pub const _POSIX_ARG_MAX: ::std::os::raw::c_uint = 4096;
pub const _POSIX_CHILD_MAX: ::std::os::raw::c_uint = 25;
pub const _POSIX_LINK_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_MAX_CANON: ::std::os::raw::c_uint = 255;
pub const _POSIX_MAX_INPUT: ::std::os::raw::c_uint = 255;
pub const _POSIX_NAME_MAX: ::std::os::raw::c_uint = 14;
pub const _POSIX_NGROUPS_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_OPEN_MAX: ::std::os::raw::c_uint = 20;
pub const _POSIX_PATH_MAX: ::std::os::raw::c_uint = 256;
pub const _POSIX_PIPE_BUF: ::std::os::raw::c_uint = 512;
pub const _POSIX_SSIZE_MAX: ::std::os::raw::c_uint = 32767;
pub const _POSIX_STREAM_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_TZNAME_MAX: ::std::os::raw::c_uint = 6;
pub const _POSIX2_BC_BASE_MAX: ::std::os::raw::c_uint = 99;
pub const _POSIX2_BC_DIM_MAX: ::std::os::raw::c_uint = 2048;
pub const _POSIX2_BC_SCALE_MAX: ::std::os::raw::c_uint = 99;
pub const _POSIX2_BC_STRING_MAX: ::std::os::raw::c_uint = 1000;
pub const _POSIX2_EQUIV_CLASS_MAX: ::std::os::raw::c_uint = 2;
pub const _POSIX2_EXPR_NEST_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX2_LINE_MAX: ::std::os::raw::c_uint = 2048;
pub const _POSIX2_RE_DUP_MAX: ::std::os::raw::c_uint = 255;
pub const _POSIX_AIO_LISTIO_MAX: ::std::os::raw::c_uint = 2;
pub const _POSIX_AIO_MAX: ::std::os::raw::c_uint = 1;
pub const _POSIX_DELAYTIMER_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_MQ_OPEN_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_MQ_PRIO_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_RTSIG_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_SEM_NSEMS_MAX: ::std::os::raw::c_uint = 256;
pub const _POSIX_SEM_VALUE_MAX: ::std::os::raw::c_uint = 32767;
pub const _POSIX_SIGQUEUE_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_TIMER_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_CLOCKRES_MIN: ::std::os::raw::c_uint = 20000000;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: ::std::os::raw::c_uint = 4;
pub const _POSIX_THREAD_KEYS_MAX: ::std::os::raw::c_uint = 128;
pub const _POSIX_THREAD_THREADS_MAX: ::std::os::raw::c_uint = 64;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: ::std::os::raw::c_uint = 4;
pub const PTHREAD_KEYS_MAX: ::std::os::raw::c_uint = 512;
pub const PTHREAD_STACK_MIN: ::std::os::raw::c_uint = 8192;
pub const _POSIX_HOST_NAME_MAX: ::std::os::raw::c_uint = 255;
pub const _POSIX_LOGIN_NAME_MAX: ::std::os::raw::c_uint = 9;
pub const _POSIX_SS_REPL_MAX: ::std::os::raw::c_uint = 4;
pub const _POSIX_SYMLINK_MAX: ::std::os::raw::c_uint = 255;
pub const _POSIX_SYMLOOP_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_TRACE_EVENT_NAME_MAX: ::std::os::raw::c_uint = 30;
pub const _POSIX_TRACE_NAME_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_TRACE_SYS_MAX: ::std::os::raw::c_uint = 8;
pub const _POSIX_TRACE_USER_EVENT_MAX: ::std::os::raw::c_uint = 32;
pub const _POSIX_TTY_NAME_MAX: ::std::os::raw::c_uint = 9;
pub const _POSIX2_CHARCLASS_NAME_MAX: ::std::os::raw::c_uint = 14;
pub const _POSIX2_COLL_WEIGHTS_MAX: ::std::os::raw::c_uint = 2;
pub const _POSIX_RE_DUP_MAX: ::std::os::raw::c_uint = 255;
pub const OFF_MIN: ::std::os::raw::c_longlong = -9223372036854775808;
pub const OFF_MAX: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const PASS_MAX: ::std::os::raw::c_uint = 128;
pub const NL_ARGMAX: ::std::os::raw::c_uint = 9;
pub const NL_LANGMAX: ::std::os::raw::c_uint = 14;
pub const NL_MSGMAX: ::std::os::raw::c_uint = 32767;
pub const NL_NMAX: ::std::os::raw::c_uint = 1;
pub const NL_SETMAX: ::std::os::raw::c_uint = 255;
pub const NL_TEXTMAX: ::std::os::raw::c_uint = 2048;
pub const _XOPEN_IOV_MAX: ::std::os::raw::c_uint = 16;
pub const IOV_MAX: ::std::os::raw::c_uint = 1024;
pub const _XOPEN_NAME_MAX: ::std::os::raw::c_uint = 255;
pub const _XOPEN_PATH_MAX: ::std::os::raw::c_uint = 1024;
extern "C" {
    pub fn sodium_version_string() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sodium_library_version_major() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sodium_library_version_minor() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sodium_library_minimal() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sodium_init() -> ::std::os::raw::c_int;
}
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = f64;
extern "C" {
    pub fn crypto_aead_aes256gcm_is_available() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_aead_aes256gcm_keybytes() -> usize;
}
extern "C" {
    pub fn crypto_aead_aes256gcm_nsecbytes() -> usize;
}
extern "C" {
    pub fn crypto_aead_aes256gcm_npubbytes() -> usize;
}
extern "C" {
    pub fn crypto_aead_aes256gcm_abytes() -> usize;
}
pub type crypto_aead_aes256gcm_state = [::std::os::raw::c_uchar; 512usize];
extern "C" {
    pub fn crypto_aead_aes256gcm_statebytes() -> usize;
}
extern "C" {
    pub fn crypto_aead_aes256gcm_encrypt(c: *mut ::std::os::raw::c_uchar,
                                         clen_p:
                                             *mut ::std::os::raw::c_ulonglong,
                                         m: *const ::std::os::raw::c_uchar,
                                         mlen: ::std::os::raw::c_ulonglong,
                                         ad: *const ::std::os::raw::c_uchar,
                                         adlen: ::std::os::raw::c_ulonglong,
                                         nsec: *const ::std::os::raw::c_uchar,
                                         npub: *const ::std::os::raw::c_uchar,
                                         k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_aead_aes256gcm_decrypt(m: *mut ::std::os::raw::c_uchar,
                                         mlen_p:
                                             *mut ::std::os::raw::c_ulonglong,
                                         nsec: *mut ::std::os::raw::c_uchar,
                                         c: *const ::std::os::raw::c_uchar,
                                         clen: ::std::os::raw::c_ulonglong,
                                         ad: *const ::std::os::raw::c_uchar,
                                         adlen: ::std::os::raw::c_ulonglong,
                                         npub: *const ::std::os::raw::c_uchar,
                                         k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_aead_aes256gcm_encrypt_detached(c:
                                                      *mut ::std::os::raw::c_uchar,
                                                  mac:
                                                      *mut ::std::os::raw::c_uchar,
                                                  maclen_p:
                                                      *mut ::std::os::raw::c_ulonglong,
                                                  m:
                                                      *const ::std::os::raw::c_uchar,
                                                  mlen:
                                                      ::std::os::raw::c_ulonglong,
                                                  ad:
                                                      *const ::std::os::raw::c_uchar,
                                                  adlen:
                                                      ::std::os::raw::c_ulonglong,
                                                  nsec:
                                                      *const ::std::os::raw::c_uchar,
                                                  npub:
                                                      *const ::std::os::raw::c_uchar,
                                                  k:
                                                      *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_aead_aes256gcm_decrypt_detached(m:
                                                      *mut ::std::os::raw::c_uchar,
                                                  nsec:
                                                      *mut ::std::os::raw::c_uchar,
                                                  c:
                                                      *const ::std::os::raw::c_uchar,
                                                  clen:
                                                      ::std::os::raw::c_ulonglong,
                                                  mac:
                                                      *const ::std::os::raw::c_uchar,
                                                  ad:
                                                      *const ::std::os::raw::c_uchar,
                                                  adlen:
                                                      ::std::os::raw::c_ulonglong,
                                                  npub:
                                                      *const ::std::os::raw::c_uchar,
                                                  k:
                                                      *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_aead_aes256gcm_beforenm(ctx_:
                                              *mut crypto_aead_aes256gcm_state,
                                          k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_aead_aes256gcm_encrypt_afternm(c:
                                                     *mut ::std::os::raw::c_uchar,
                                                 clen_p:
                                                     *mut ::std::os::raw::c_ulonglong,
                                                 m:
                                                     *const ::std::os::raw::c_uchar,
                                                 mlen:
                                                     ::std::os::raw::c_ulonglong,
                                                 ad:
                                                     *const ::std::os::raw::c_uchar,
                                                 adlen:
                                                     ::std::os::raw::c_ulonglong,
                                                 nsec:
                                                     *const ::std::os::raw::c_uchar,
                                                 npub:
                                                     *const ::std::os::raw::c_uchar,
                                                 ctx_:
                                                     *const crypto_aead_aes256gcm_state)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_aead_aes256gcm_decrypt_afternm(m:
                                                     *mut ::std::os::raw::c_uchar,
                                                 mlen_p:
                                                     *mut ::std::os::raw::c_ulonglong,
                                                 nsec:
                                                     *mut ::std::os::raw::c_uchar,
                                                 c:
                                                     *const ::std::os::raw::c_uchar,
                                                 clen:
                                                     ::std::os::raw::c_ulonglong,
                                                 ad:
                                                     *const ::std::os::raw::c_uchar,
                                                 adlen:
                                                     ::std::os::raw::c_ulonglong,
                                                 npub:
                                                     *const ::std::os::raw::c_uchar,
                                                 ctx_:
                                                     *const crypto_aead_aes256gcm_state)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_aead_aes256gcm_encrypt_detached_afternm(c:
                                                              *mut ::std::os::raw::c_uchar,
                                                          mac:
                                                              *mut ::std::os::raw::c_uchar,
                                                          maclen_p:
                                                              *mut ::std::os::raw::c_ulonglong,
                                                          m:
                                                              *const ::std::os::raw::c_uchar,
                                                          mlen:
                                                              ::std::os::raw::c_ulonglong,
                                                          ad:
                                                              *const ::std::os::raw::c_uchar,
                                                          adlen:
                                                              ::std::os::raw::c_ulonglong,
                                                          nsec:
                                                              *const ::std::os::raw::c_uchar,
                                                          npub:
                                                              *const ::std::os::raw::c_uchar,
                                                          ctx_:
                                                              *const crypto_aead_aes256gcm_state)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_aead_aes256gcm_decrypt_detached_afternm(m:
                                                              *mut ::std::os::raw::c_uchar,
                                                          nsec:
                                                              *mut ::std::os::raw::c_uchar,
                                                          c:
                                                              *const ::std::os::raw::c_uchar,
                                                          clen:
                                                              ::std::os::raw::c_ulonglong,
                                                          mac:
                                                              *const ::std::os::raw::c_uchar,
                                                          ad:
                                                              *const ::std::os::raw::c_uchar,
                                                          adlen:
                                                              ::std::os::raw::c_ulonglong,
                                                          npub:
                                                              *const ::std::os::raw::c_uchar,
                                                          ctx_:
                                                              *const crypto_aead_aes256gcm_state)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_aead_aes256gcm_keygen(k: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn crypto_aead_chacha20poly1305_ietf_keybytes() -> usize;
}
extern "C" {
    pub fn crypto_aead_chacha20poly1305_ietf_nsecbytes() -> usize;
}
extern "C" {
    pub fn crypto_aead_chacha20poly1305_ietf_npubbytes() -> usize;
}
extern "C" {
    pub fn crypto_aead_chacha20poly1305_ietf_abytes() -> usize;
}
extern "C" {
    pub fn crypto_aead_chacha20poly1305_ietf_encrypt(c:
                                                         *mut ::std::os::raw::c_uchar,
                                                     clen_p:
                                                         *mut ::std::os::raw::c_ulonglong,
                                                     m:
                                                         *const ::std::os::raw::c_uchar,
                                                     mlen:
                                                         ::std::os::raw::c_ulonglong,
                                                     ad:
                                                         *const ::std::os::raw::c_uchar,
                                                     adlen:
                                                         ::std::os::raw::c_ulonglong,
                                                     nsec:
                                                         *const ::std::os::raw::c_uchar,
                                                     npub:
                                                         *const ::std::os::raw::c_uchar,
                                                     k:
                                                         *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_aead_chacha20poly1305_ietf_decrypt(m:
                                                         *mut ::std::os::raw::c_uchar,
                                                     mlen_p:
                                                         *mut ::std::os::raw::c_ulonglong,
                                                     nsec:
                                                         *mut ::std::os::raw::c_uchar,
                                                     c:
                                                         *const ::std::os::raw::c_uchar,
                                                     clen:
                                                         ::std::os::raw::c_ulonglong,
                                                     ad:
                                                         *const ::std::os::raw::c_uchar,
                                                     adlen:
                                                         ::std::os::raw::c_ulonglong,
                                                     npub:
                                                         *const ::std::os::raw::c_uchar,
                                                     k:
                                                         *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_aead_chacha20poly1305_ietf_encrypt_detached(c:
                                                                  *mut ::std::os::raw::c_uchar,
                                                              mac:
                                                                  *mut ::std::os::raw::c_uchar,
                                                              maclen_p:
                                                                  *mut ::std::os::raw::c_ulonglong,
                                                              m:
                                                                  *const ::std::os::raw::c_uchar,
                                                              mlen:
                                                                  ::std::os::raw::c_ulonglong,
                                                              ad:
                                                                  *const ::std::os::raw::c_uchar,
                                                              adlen:
                                                                  ::std::os::raw::c_ulonglong,
                                                              nsec:
                                                                  *const ::std::os::raw::c_uchar,
                                                              npub:
                                                                  *const ::std::os::raw::c_uchar,
                                                              k:
                                                                  *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_aead_chacha20poly1305_ietf_decrypt_detached(m:
                                                                  *mut ::std::os::raw::c_uchar,
                                                              nsec:
                                                                  *mut ::std::os::raw::c_uchar,
                                                              c:
                                                                  *const ::std::os::raw::c_uchar,
                                                              clen:
                                                                  ::std::os::raw::c_ulonglong,
                                                              mac:
                                                                  *const ::std::os::raw::c_uchar,
                                                              ad:
                                                                  *const ::std::os::raw::c_uchar,
                                                              adlen:
                                                                  ::std::os::raw::c_ulonglong,
                                                              npub:
                                                                  *const ::std::os::raw::c_uchar,
                                                              k:
                                                                  *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_aead_chacha20poly1305_ietf_keygen(k:
                                                        *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn crypto_aead_chacha20poly1305_keybytes() -> usize;
}
extern "C" {
    pub fn crypto_aead_chacha20poly1305_nsecbytes() -> usize;
}
extern "C" {
    pub fn crypto_aead_chacha20poly1305_npubbytes() -> usize;
}
extern "C" {
    pub fn crypto_aead_chacha20poly1305_abytes() -> usize;
}
extern "C" {
    pub fn crypto_aead_chacha20poly1305_encrypt(c:
                                                    *mut ::std::os::raw::c_uchar,
                                                clen_p:
                                                    *mut ::std::os::raw::c_ulonglong,
                                                m:
                                                    *const ::std::os::raw::c_uchar,
                                                mlen:
                                                    ::std::os::raw::c_ulonglong,
                                                ad:
                                                    *const ::std::os::raw::c_uchar,
                                                adlen:
                                                    ::std::os::raw::c_ulonglong,
                                                nsec:
                                                    *const ::std::os::raw::c_uchar,
                                                npub:
                                                    *const ::std::os::raw::c_uchar,
                                                k:
                                                    *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_aead_chacha20poly1305_decrypt(m:
                                                    *mut ::std::os::raw::c_uchar,
                                                mlen_p:
                                                    *mut ::std::os::raw::c_ulonglong,
                                                nsec:
                                                    *mut ::std::os::raw::c_uchar,
                                                c:
                                                    *const ::std::os::raw::c_uchar,
                                                clen:
                                                    ::std::os::raw::c_ulonglong,
                                                ad:
                                                    *const ::std::os::raw::c_uchar,
                                                adlen:
                                                    ::std::os::raw::c_ulonglong,
                                                npub:
                                                    *const ::std::os::raw::c_uchar,
                                                k:
                                                    *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_aead_chacha20poly1305_encrypt_detached(c:
                                                             *mut ::std::os::raw::c_uchar,
                                                         mac:
                                                             *mut ::std::os::raw::c_uchar,
                                                         maclen_p:
                                                             *mut ::std::os::raw::c_ulonglong,
                                                         m:
                                                             *const ::std::os::raw::c_uchar,
                                                         mlen:
                                                             ::std::os::raw::c_ulonglong,
                                                         ad:
                                                             *const ::std::os::raw::c_uchar,
                                                         adlen:
                                                             ::std::os::raw::c_ulonglong,
                                                         nsec:
                                                             *const ::std::os::raw::c_uchar,
                                                         npub:
                                                             *const ::std::os::raw::c_uchar,
                                                         k:
                                                             *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_aead_chacha20poly1305_decrypt_detached(m:
                                                             *mut ::std::os::raw::c_uchar,
                                                         nsec:
                                                             *mut ::std::os::raw::c_uchar,
                                                         c:
                                                             *const ::std::os::raw::c_uchar,
                                                         clen:
                                                             ::std::os::raw::c_ulonglong,
                                                         mac:
                                                             *const ::std::os::raw::c_uchar,
                                                         ad:
                                                             *const ::std::os::raw::c_uchar,
                                                         adlen:
                                                             ::std::os::raw::c_ulonglong,
                                                         npub:
                                                             *const ::std::os::raw::c_uchar,
                                                         k:
                                                             *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_aead_chacha20poly1305_keygen(k:
                                                   *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn crypto_aead_xchacha20poly1305_ietf_keybytes() -> usize;
}
extern "C" {
    pub fn crypto_aead_xchacha20poly1305_ietf_nsecbytes() -> usize;
}
extern "C" {
    pub fn crypto_aead_xchacha20poly1305_ietf_npubbytes() -> usize;
}
extern "C" {
    pub fn crypto_aead_xchacha20poly1305_ietf_abytes() -> usize;
}
extern "C" {
    pub fn crypto_aead_xchacha20poly1305_ietf_encrypt(c:
                                                          *mut ::std::os::raw::c_uchar,
                                                      clen_p:
                                                          *mut ::std::os::raw::c_ulonglong,
                                                      m:
                                                          *const ::std::os::raw::c_uchar,
                                                      mlen:
                                                          ::std::os::raw::c_ulonglong,
                                                      ad:
                                                          *const ::std::os::raw::c_uchar,
                                                      adlen:
                                                          ::std::os::raw::c_ulonglong,
                                                      nsec:
                                                          *const ::std::os::raw::c_uchar,
                                                      npub:
                                                          *const ::std::os::raw::c_uchar,
                                                      k:
                                                          *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_aead_xchacha20poly1305_ietf_decrypt(m:
                                                          *mut ::std::os::raw::c_uchar,
                                                      mlen_p:
                                                          *mut ::std::os::raw::c_ulonglong,
                                                      nsec:
                                                          *mut ::std::os::raw::c_uchar,
                                                      c:
                                                          *const ::std::os::raw::c_uchar,
                                                      clen:
                                                          ::std::os::raw::c_ulonglong,
                                                      ad:
                                                          *const ::std::os::raw::c_uchar,
                                                      adlen:
                                                          ::std::os::raw::c_ulonglong,
                                                      npub:
                                                          *const ::std::os::raw::c_uchar,
                                                      k:
                                                          *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_aead_xchacha20poly1305_ietf_encrypt_detached(c:
                                                                   *mut ::std::os::raw::c_uchar,
                                                               mac:
                                                                   *mut ::std::os::raw::c_uchar,
                                                               maclen_p:
                                                                   *mut ::std::os::raw::c_ulonglong,
                                                               m:
                                                                   *const ::std::os::raw::c_uchar,
                                                               mlen:
                                                                   ::std::os::raw::c_ulonglong,
                                                               ad:
                                                                   *const ::std::os::raw::c_uchar,
                                                               adlen:
                                                                   ::std::os::raw::c_ulonglong,
                                                               nsec:
                                                                   *const ::std::os::raw::c_uchar,
                                                               npub:
                                                                   *const ::std::os::raw::c_uchar,
                                                               k:
                                                                   *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_aead_xchacha20poly1305_ietf_decrypt_detached(m:
                                                                   *mut ::std::os::raw::c_uchar,
                                                               nsec:
                                                                   *mut ::std::os::raw::c_uchar,
                                                               c:
                                                                   *const ::std::os::raw::c_uchar,
                                                               clen:
                                                                   ::std::os::raw::c_ulonglong,
                                                               mac:
                                                                   *const ::std::os::raw::c_uchar,
                                                               ad:
                                                                   *const ::std::os::raw::c_uchar,
                                                               adlen:
                                                                   ::std::os::raw::c_ulonglong,
                                                               npub:
                                                                   *const ::std::os::raw::c_uchar,
                                                               k:
                                                                   *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_aead_xchacha20poly1305_ietf_keygen(k:
                                                         *mut ::std::os::raw::c_uchar);
}
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_char;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __mbstate_t {
    pub __mbstate8: __BindgenUnionField<[::std::os::raw::c_char; 128usize]>,
    pub _mbstateL: __BindgenUnionField<::std::os::raw::c_longlong>,
    pub bindgen_union_field: [u64; 16usize],
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(::std::mem::size_of::<__mbstate_t>() , 128usize , concat ! (
               "Size of: " , stringify ! ( __mbstate_t ) ));
    assert_eq! (::std::mem::align_of::<__mbstate_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __mbstate_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __mbstate_t ) ) . __mbstate8 as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __mbstate_t ) , "::" ,
                stringify ! ( __mbstate8 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __mbstate_t ) ) . _mbstateL as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __mbstate_t ) , "::" ,
                stringify ! ( _mbstateL ) ));
}
impl Clone for __mbstate_t {
    fn clone(&self) -> Self { *self }
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                  *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(::std::mem::size_of::<__darwin_pthread_handler_rec>() , 24usize
               , concat ! (
               "Size of: " , stringify ! ( __darwin_pthread_handler_rec ) ));
    assert_eq! (::std::mem::align_of::<__darwin_pthread_handler_rec>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! ( __darwin_pthread_handler_rec )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_pthread_handler_rec ) ) .
                __routine as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_pthread_handler_rec ) , "::" , stringify ! (
                __routine ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_pthread_handler_rec ) ) . __arg
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_pthread_handler_rec ) , "::" , stringify ! ( __arg )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_pthread_handler_rec ) ) . __next
                as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_pthread_handler_rec ) , "::" , stringify ! ( __next )
                ));
}
impl Clone for __darwin_pthread_handler_rec {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_attr_t>() , 64usize ,
               concat ! ( "Size of: " , stringify ! ( _opaque_pthread_attr_t )
               ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_attr_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_attr_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_attr_t ) ) . __sig as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_attr_t
                ) , "::" , stringify ! ( __sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_attr_t ) ) . __opaque as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_attr_t
                ) , "::" , stringify ! ( __opaque ) ));
}
#[repr(C)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_cond_t>() , 48usize ,
               concat ! ( "Size of: " , stringify ! ( _opaque_pthread_cond_t )
               ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_cond_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_cond_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_cond_t ) ) . __sig as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_cond_t
                ) , "::" , stringify ! ( __sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_cond_t ) ) . __opaque as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_cond_t
                ) , "::" , stringify ! ( __opaque ) ));
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_condattr_t>() , 16usize ,
               concat ! (
               "Size of: " , stringify ! ( _opaque_pthread_condattr_t ) ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_condattr_t>() , 8usize
                , concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_condattr_t )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_condattr_t ) ) . __sig as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_condattr_t ) , "::" , stringify ! ( __sig )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_condattr_t ) ) . __opaque
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_condattr_t ) , "::" , stringify ! ( __opaque )
                ));
}
impl Clone for _opaque_pthread_condattr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_mutex_t>() , 64usize ,
               concat ! (
               "Size of: " , stringify ! ( _opaque_pthread_mutex_t ) ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_mutex_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_mutex_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_mutex_t ) ) . __sig as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_mutex_t
                ) , "::" , stringify ! ( __sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_mutex_t ) ) . __opaque as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_mutex_t
                ) , "::" , stringify ! ( __opaque ) ));
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_mutexattr_t>() , 16usize
               , concat ! (
               "Size of: " , stringify ! ( _opaque_pthread_mutexattr_t ) ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_mutexattr_t>() , 8usize
                , concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_mutexattr_t )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_mutexattr_t ) ) . __sig
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_mutexattr_t ) , "::" , stringify ! ( __sig )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_mutexattr_t ) ) .
                __opaque as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_mutexattr_t ) , "::" , stringify ! ( __opaque
                ) ));
}
impl Clone for _opaque_pthread_mutexattr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_once_t>() , 16usize ,
               concat ! ( "Size of: " , stringify ! ( _opaque_pthread_once_t )
               ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_once_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_once_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_once_t ) ) . __sig as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_once_t
                ) , "::" , stringify ! ( __sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_once_t ) ) . __opaque as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_once_t
                ) , "::" , stringify ! ( __opaque ) ));
}
impl Clone for _opaque_pthread_once_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_rwlock_t>() , 200usize ,
               concat ! (
               "Size of: " , stringify ! ( _opaque_pthread_rwlock_t ) ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_rwlock_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_rwlock_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_rwlock_t ) ) . __sig as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_rwlock_t ) , "::" , stringify ! ( __sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_rwlock_t ) ) . __opaque
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_rwlock_t ) , "::" , stringify ! ( __opaque )
                ));
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_rwlockattr_t>() , 24usize
               , concat ! (
               "Size of: " , stringify ! ( _opaque_pthread_rwlockattr_t ) ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_rwlockattr_t>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! ( _opaque_pthread_rwlockattr_t )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_rwlockattr_t ) ) . __sig
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_rwlockattr_t ) , "::" , stringify ! ( __sig )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_rwlockattr_t ) ) .
                __opaque as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                _opaque_pthread_rwlockattr_t ) , "::" , stringify ! ( __opaque
                ) ));
}
impl Clone for _opaque_pthread_rwlockattr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(::std::mem::size_of::<_opaque_pthread_t>() , 8192usize , concat
               ! ( "Size of: " , stringify ! ( _opaque_pthread_t ) ));
    assert_eq! (::std::mem::align_of::<_opaque_pthread_t>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( _opaque_pthread_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_t ) ) . __sig as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_t ) ,
                "::" , stringify ! ( __sig ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_t ) ) . __cleanup_stack
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_t ) ,
                "::" , stringify ! ( __cleanup_stack ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _opaque_pthread_t ) ) . __opaque as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _opaque_pthread_t ) ,
                "::" , stringify ! ( __opaque ) ));
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum idtype_t { P_ALL = 0, P_PID = 1, P_PGID = 2, }
pub type pid_t = __darwin_pid_t;
pub type id_t = __darwin_id_t;
pub type sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __darwin_i386_thread_state {
    pub __eax: ::std::os::raw::c_uint,
    pub __ebx: ::std::os::raw::c_uint,
    pub __ecx: ::std::os::raw::c_uint,
    pub __edx: ::std::os::raw::c_uint,
    pub __edi: ::std::os::raw::c_uint,
    pub __esi: ::std::os::raw::c_uint,
    pub __ebp: ::std::os::raw::c_uint,
    pub __esp: ::std::os::raw::c_uint,
    pub __ss: ::std::os::raw::c_uint,
    pub __eflags: ::std::os::raw::c_uint,
    pub __eip: ::std::os::raw::c_uint,
    pub __cs: ::std::os::raw::c_uint,
    pub __ds: ::std::os::raw::c_uint,
    pub __es: ::std::os::raw::c_uint,
    pub __fs: ::std::os::raw::c_uint,
    pub __gs: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___darwin_i386_thread_state() {
    assert_eq!(::std::mem::size_of::<__darwin_i386_thread_state>() , 64usize ,
               concat ! (
               "Size of: " , stringify ! ( __darwin_i386_thread_state ) ));
    assert_eq! (::std::mem::align_of::<__darwin_i386_thread_state>() , 4usize
                , concat ! (
                "Alignment of " , stringify ! ( __darwin_i386_thread_state )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_thread_state ) ) . __eax as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_thread_state ) , "::" , stringify ! ( __eax )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_thread_state ) ) . __ebx as
                * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_thread_state ) , "::" , stringify ! ( __ebx )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_thread_state ) ) . __ecx as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_thread_state ) , "::" , stringify ! ( __ecx )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_thread_state ) ) . __edx as
                * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_thread_state ) , "::" , stringify ! ( __edx )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_thread_state ) ) . __edi as
                * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_thread_state ) , "::" , stringify ! ( __edi )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_thread_state ) ) . __esi as
                * const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_thread_state ) , "::" , stringify ! ( __esi )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_thread_state ) ) . __ebp as
                * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_thread_state ) , "::" , stringify ! ( __ebp )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_thread_state ) ) . __esp as
                * const _ as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_thread_state ) , "::" , stringify ! ( __esp )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_thread_state ) ) . __ss as
                * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_thread_state ) , "::" , stringify ! ( __ss ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_thread_state ) ) . __eflags
                as * const _ as usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_thread_state ) , "::" , stringify ! ( __eflags )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_thread_state ) ) . __eip as
                * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_thread_state ) , "::" , stringify ! ( __eip )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_thread_state ) ) . __cs as
                * const _ as usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_thread_state ) , "::" , stringify ! ( __cs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_thread_state ) ) . __ds as
                * const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_thread_state ) , "::" , stringify ! ( __ds ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_thread_state ) ) . __es as
                * const _ as usize } , 52usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_thread_state ) , "::" , stringify ! ( __es ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_thread_state ) ) . __fs as
                * const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_thread_state ) , "::" , stringify ! ( __fs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_thread_state ) ) . __gs as
                * const _ as usize } , 60usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_thread_state ) , "::" , stringify ! ( __gs ) ));
}
impl Clone for __darwin_i386_thread_state {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __darwin_fp_control {
    pub _bitfield_1: [u8; 2usize],
    pub __bindgen_align: [u16; 0usize],
}
#[test]
fn bindgen_test_layout___darwin_fp_control() {
    assert_eq!(::std::mem::size_of::<__darwin_fp_control>() , 2usize , concat
               ! ( "Size of: " , stringify ! ( __darwin_fp_control ) ));
    assert_eq! (::std::mem::align_of::<__darwin_fp_control>() , 2usize ,
                concat ! (
                "Alignment of " , stringify ! ( __darwin_fp_control ) ));
}
impl Clone for __darwin_fp_control {
    fn clone(&self) -> Self { *self }
}
pub type __darwin_fp_control_t = __darwin_fp_control;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __darwin_fp_status {
    pub _bitfield_1: [u8; 2usize],
    pub __bindgen_align: [u16; 0usize],
}
#[test]
fn bindgen_test_layout___darwin_fp_status() {
    assert_eq!(::std::mem::size_of::<__darwin_fp_status>() , 2usize , concat !
               ( "Size of: " , stringify ! ( __darwin_fp_status ) ));
    assert_eq! (::std::mem::align_of::<__darwin_fp_status>() , 2usize , concat
                ! ( "Alignment of " , stringify ! ( __darwin_fp_status ) ));
}
impl Clone for __darwin_fp_status {
    fn clone(&self) -> Self { *self }
}
pub type __darwin_fp_status_t = __darwin_fp_status;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __darwin_mmst_reg {
    pub __mmst_reg: [::std::os::raw::c_char; 10usize],
    pub __mmst_rsrv: [::std::os::raw::c_char; 6usize],
}
#[test]
fn bindgen_test_layout___darwin_mmst_reg() {
    assert_eq!(::std::mem::size_of::<__darwin_mmst_reg>() , 16usize , concat !
               ( "Size of: " , stringify ! ( __darwin_mmst_reg ) ));
    assert_eq! (::std::mem::align_of::<__darwin_mmst_reg>() , 1usize , concat
                ! ( "Alignment of " , stringify ! ( __darwin_mmst_reg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_mmst_reg ) ) . __mmst_reg as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_mmst_reg ) ,
                "::" , stringify ! ( __mmst_reg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_mmst_reg ) ) . __mmst_rsrv as *
                const _ as usize } , 10usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_mmst_reg ) ,
                "::" , stringify ! ( __mmst_rsrv ) ));
}
impl Clone for __darwin_mmst_reg {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __darwin_xmm_reg {
    pub __xmm_reg: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout___darwin_xmm_reg() {
    assert_eq!(::std::mem::size_of::<__darwin_xmm_reg>() , 16usize , concat !
               ( "Size of: " , stringify ! ( __darwin_xmm_reg ) ));
    assert_eq! (::std::mem::align_of::<__darwin_xmm_reg>() , 1usize , concat !
                ( "Alignment of " , stringify ! ( __darwin_xmm_reg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_xmm_reg ) ) . __xmm_reg as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_xmm_reg ) ,
                "::" , stringify ! ( __xmm_reg ) ));
}
impl Clone for __darwin_xmm_reg {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct __darwin_i386_float_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_i386_float_state() {
    assert_eq!(::std::mem::size_of::<__darwin_i386_float_state>() , 524usize ,
               concat ! (
               "Size of: " , stringify ! ( __darwin_i386_float_state ) ));
    assert_eq! (::std::mem::align_of::<__darwin_i386_float_state>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( __darwin_i386_float_state )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_reserved as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! (
                __fpu_reserved ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) . __fpu_fcw
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_fcw )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) . __fpu_fsw
                as * const _ as usize } , 10usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_fsw )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) . __fpu_ftw
                as * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_ftw )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_rsrv1 as * const _ as usize } , 13usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_rsrv1
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) . __fpu_fop
                as * const _ as usize } , 14usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_fop )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) . __fpu_ip
                as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_ip )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) . __fpu_cs
                as * const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_cs )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_rsrv2 as * const _ as usize } , 22usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_rsrv2
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) . __fpu_dp
                as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_dp )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) . __fpu_ds
                as * const _ as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_ds )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_rsrv3 as * const _ as usize } , 30usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_rsrv3
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_mxcsr as * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_mxcsr
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_mxcsrmask as * const _ as usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! (
                __fpu_mxcsrmask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_stmm0 as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_stmm0
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_stmm1 as * const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_stmm1
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_stmm2 as * const _ as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_stmm2
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_stmm3 as * const _ as usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_stmm3
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_stmm4 as * const _ as usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_stmm4
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_stmm5 as * const _ as usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_stmm5
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_stmm6 as * const _ as usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_stmm6
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_stmm7 as * const _ as usize } , 152usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_stmm7
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_xmm0 as * const _ as usize } , 168usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_xmm0
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_xmm1 as * const _ as usize } , 184usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_xmm1
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_xmm2 as * const _ as usize } , 200usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_xmm2
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_xmm3 as * const _ as usize } , 216usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_xmm3
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_xmm4 as * const _ as usize } , 232usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_xmm4
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_xmm5 as * const _ as usize } , 248usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_xmm5
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_xmm6 as * const _ as usize } , 264usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_xmm6
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_xmm7 as * const _ as usize } , 280usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_xmm7
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_rsrv4 as * const _ as usize } , 296usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! ( __fpu_rsrv4
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_float_state ) ) .
                __fpu_reserved1 as * const _ as usize } , 520usize , concat !
                (
                "Alignment of field: " , stringify ! (
                __darwin_i386_float_state ) , "::" , stringify ! (
                __fpu_reserved1 ) ));
}
#[repr(C)]
pub struct __darwin_i386_avx_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_i386_avx_state() {
    assert_eq!(::std::mem::size_of::<__darwin_i386_avx_state>() , 716usize ,
               concat ! (
               "Size of: " , stringify ! ( __darwin_i386_avx_state ) ));
    assert_eq! (::std::mem::align_of::<__darwin_i386_avx_state>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( __darwin_i386_avx_state ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) .
                __fpu_reserved as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_reserved ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_fcw
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_fcw ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_fsw
                as * const _ as usize } , 10usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_fsw ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_ftw
                as * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_ftw ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_rsrv1
                as * const _ as usize } , 13usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_rsrv1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_fop
                as * const _ as usize } , 14usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_fop ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_ip as
                * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_ip ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_cs as
                * const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_cs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_rsrv2
                as * const _ as usize } , 22usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_rsrv2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_dp as
                * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_dp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_ds as
                * const _ as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_ds ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_rsrv3
                as * const _ as usize } , 30usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_rsrv3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_mxcsr
                as * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_mxcsr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) .
                __fpu_mxcsrmask as * const _ as usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_mxcsrmask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_stmm0
                as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_stmm0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_stmm1
                as * const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_stmm1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_stmm2
                as * const _ as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_stmm2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_stmm3
                as * const _ as usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_stmm3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_stmm4
                as * const _ as usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_stmm4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_stmm5
                as * const _ as usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_stmm5 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_stmm6
                as * const _ as usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_stmm6 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_stmm7
                as * const _ as usize } , 152usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_stmm7 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_xmm0
                as * const _ as usize } , 168usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_xmm0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_xmm1
                as * const _ as usize } , 184usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_xmm1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_xmm2
                as * const _ as usize } , 200usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_xmm2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_xmm3
                as * const _ as usize } , 216usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_xmm3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_xmm4
                as * const _ as usize } , 232usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_xmm4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_xmm5
                as * const _ as usize } , 248usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_xmm5 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_xmm6
                as * const _ as usize } , 264usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_xmm6 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_xmm7
                as * const _ as usize } , 280usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_xmm7 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_rsrv4
                as * const _ as usize } , 296usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_rsrv4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) .
                __fpu_reserved1 as * const _ as usize } , 520usize , concat !
                (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_reserved1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) .
                __avx_reserved1 as * const _ as usize } , 524usize , concat !
                (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __avx_reserved1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_ymmh0
                as * const _ as usize } , 588usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_ymmh0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_ymmh1
                as * const _ as usize } , 604usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_ymmh1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_ymmh2
                as * const _ as usize } , 620usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_ymmh2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_ymmh3
                as * const _ as usize } , 636usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_ymmh3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_ymmh4
                as * const _ as usize } , 652usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_ymmh4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_ymmh5
                as * const _ as usize } , 668usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_ymmh5 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_ymmh6
                as * const _ as usize } , 684usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_ymmh6 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_avx_state ) ) . __fpu_ymmh7
                as * const _ as usize } , 700usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_i386_avx_state
                ) , "::" , stringify ! ( __fpu_ymmh7 ) ));
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __darwin_i386_exception_state {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_i386_exception_state() {
    assert_eq!(::std::mem::size_of::<__darwin_i386_exception_state>() ,
               12usize , concat ! (
               "Size of: " , stringify ! ( __darwin_i386_exception_state ) ));
    assert_eq! (::std::mem::align_of::<__darwin_i386_exception_state>() ,
                4usize , concat ! (
                "Alignment of " , stringify ! ( __darwin_i386_exception_state
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_exception_state ) ) .
                __trapno as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_exception_state ) , "::" , stringify ! (
                __trapno ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_exception_state ) ) . __cpu
                as * const _ as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_exception_state ) , "::" , stringify ! ( __cpu )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_exception_state ) ) . __err
                as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_exception_state ) , "::" , stringify ! ( __err )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_i386_exception_state ) ) .
                __faultvaddr as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_i386_exception_state ) , "::" , stringify ! (
                __faultvaddr ) ));
}
impl Clone for __darwin_i386_exception_state {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __darwin_x86_debug_state32 {
    pub __dr0: ::std::os::raw::c_uint,
    pub __dr1: ::std::os::raw::c_uint,
    pub __dr2: ::std::os::raw::c_uint,
    pub __dr3: ::std::os::raw::c_uint,
    pub __dr4: ::std::os::raw::c_uint,
    pub __dr5: ::std::os::raw::c_uint,
    pub __dr6: ::std::os::raw::c_uint,
    pub __dr7: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___darwin_x86_debug_state32() {
    assert_eq!(::std::mem::size_of::<__darwin_x86_debug_state32>() , 32usize ,
               concat ! (
               "Size of: " , stringify ! ( __darwin_x86_debug_state32 ) ));
    assert_eq! (::std::mem::align_of::<__darwin_x86_debug_state32>() , 4usize
                , concat ! (
                "Alignment of " , stringify ! ( __darwin_x86_debug_state32 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_debug_state32 ) ) . __dr0 as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_debug_state32 ) , "::" , stringify ! ( __dr0 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_debug_state32 ) ) . __dr1 as
                * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_debug_state32 ) , "::" , stringify ! ( __dr1 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_debug_state32 ) ) . __dr2 as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_debug_state32 ) , "::" , stringify ! ( __dr2 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_debug_state32 ) ) . __dr3 as
                * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_debug_state32 ) , "::" , stringify ! ( __dr3 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_debug_state32 ) ) . __dr4 as
                * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_debug_state32 ) , "::" , stringify ! ( __dr4 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_debug_state32 ) ) . __dr5 as
                * const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_debug_state32 ) , "::" , stringify ! ( __dr5 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_debug_state32 ) ) . __dr6 as
                * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_debug_state32 ) , "::" , stringify ! ( __dr6 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_debug_state32 ) ) . __dr7 as
                * const _ as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_debug_state32 ) , "::" , stringify ! ( __dr7 )
                ));
}
impl Clone for __darwin_x86_debug_state32 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __darwin_x86_thread_state64 {
    pub __rax: __uint64_t,
    pub __rbx: __uint64_t,
    pub __rcx: __uint64_t,
    pub __rdx: __uint64_t,
    pub __rdi: __uint64_t,
    pub __rsi: __uint64_t,
    pub __rbp: __uint64_t,
    pub __rsp: __uint64_t,
    pub __r8: __uint64_t,
    pub __r9: __uint64_t,
    pub __r10: __uint64_t,
    pub __r11: __uint64_t,
    pub __r12: __uint64_t,
    pub __r13: __uint64_t,
    pub __r14: __uint64_t,
    pub __r15: __uint64_t,
    pub __rip: __uint64_t,
    pub __rflags: __uint64_t,
    pub __cs: __uint64_t,
    pub __fs: __uint64_t,
    pub __gs: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_thread_state64() {
    assert_eq!(::std::mem::size_of::<__darwin_x86_thread_state64>() , 168usize
               , concat ! (
               "Size of: " , stringify ! ( __darwin_x86_thread_state64 ) ));
    assert_eq! (::std::mem::align_of::<__darwin_x86_thread_state64>() , 8usize
                , concat ! (
                "Alignment of " , stringify ! ( __darwin_x86_thread_state64 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __rax
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __rax )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __rbx
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __rbx )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __rcx
                as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __rcx )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __rdx
                as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __rdx )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __rdi
                as * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __rdi )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __rsi
                as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __rsi )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __rbp
                as * const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __rbp )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __rsp
                as * const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __rsp )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __r8 as
                * const _ as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __r8 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __r9 as
                * const _ as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __r9 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __r10
                as * const _ as usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __r10 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __r11
                as * const _ as usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __r11 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __r12
                as * const _ as usize } , 96usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __r12 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __r13
                as * const _ as usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __r13 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __r14
                as * const _ as usize } , 112usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __r14 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __r15
                as * const _ as usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __r15 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __rip
                as * const _ as usize } , 128usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __rip )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) .
                __rflags as * const _ as usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __rflags
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __cs as
                * const _ as usize } , 144usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __cs )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __fs as
                * const _ as usize } , 152usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __fs )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_thread_state64 ) ) . __gs as
                * const _ as usize } , 160usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_thread_state64 ) , "::" , stringify ! ( __gs )
                ));
}
impl Clone for __darwin_x86_thread_state64 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct __darwin_x86_float_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_x86_float_state64() {
    assert_eq!(::std::mem::size_of::<__darwin_x86_float_state64>() , 524usize
               , concat ! (
               "Size of: " , stringify ! ( __darwin_x86_float_state64 ) ));
    assert_eq! (::std::mem::align_of::<__darwin_x86_float_state64>() , 4usize
                , concat ! (
                "Alignment of " , stringify ! ( __darwin_x86_float_state64 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_reserved as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_reserved ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_fcw as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_fcw
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_fsw as * const _ as usize } , 10usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_fsw
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_ftw as * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_ftw
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_rsrv1 as * const _ as usize } , 13usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_rsrv1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_fop as * const _ as usize } , 14usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_fop
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) . __fpu_ip
                as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_ip )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) . __fpu_cs
                as * const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_cs )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_rsrv2 as * const _ as usize } , 22usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_rsrv2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) . __fpu_dp
                as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_dp )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) . __fpu_ds
                as * const _ as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_ds )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_rsrv3 as * const _ as usize } , 30usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_rsrv3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_mxcsr as * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_mxcsr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_mxcsrmask as * const _ as usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_mxcsrmask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_stmm0 as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_stmm0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_stmm1 as * const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_stmm1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_stmm2 as * const _ as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_stmm2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_stmm3 as * const _ as usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_stmm3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_stmm4 as * const _ as usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_stmm4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_stmm5 as * const _ as usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_stmm5 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_stmm6 as * const _ as usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_stmm6 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_stmm7 as * const _ as usize } , 152usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_stmm7 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_xmm0 as * const _ as usize } , 168usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_xmm0
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_xmm1 as * const _ as usize } , 184usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_xmm1
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_xmm2 as * const _ as usize } , 200usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_xmm2
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_xmm3 as * const _ as usize } , 216usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_xmm3
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_xmm4 as * const _ as usize } , 232usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_xmm4
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_xmm5 as * const _ as usize } , 248usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_xmm5
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_xmm6 as * const _ as usize } , 264usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_xmm6
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_xmm7 as * const _ as usize } , 280usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_xmm7
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_xmm8 as * const _ as usize } , 296usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_xmm8
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_xmm9 as * const _ as usize } , 312usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! ( __fpu_xmm9
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_xmm10 as * const _ as usize } , 328usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_xmm10 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_xmm11 as * const _ as usize } , 344usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_xmm11 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_xmm12 as * const _ as usize } , 360usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_xmm12 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_xmm13 as * const _ as usize } , 376usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_xmm13 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_xmm14 as * const _ as usize } , 392usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_xmm14 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_xmm15 as * const _ as usize } , 408usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_xmm15 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_rsrv4 as * const _ as usize } , 424usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_rsrv4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_float_state64 ) ) .
                __fpu_reserved1 as * const _ as usize } , 520usize , concat !
                (
                "Alignment of field: " , stringify ! (
                __darwin_x86_float_state64 ) , "::" , stringify ! (
                __fpu_reserved1 ) ));
}
#[repr(C)]
pub struct __darwin_x86_avx_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_x86_avx_state64() {
    assert_eq!(::std::mem::size_of::<__darwin_x86_avx_state64>() , 844usize ,
               concat ! (
               "Size of: " , stringify ! ( __darwin_x86_avx_state64 ) ));
    assert_eq! (::std::mem::align_of::<__darwin_x86_avx_state64>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( __darwin_x86_avx_state64 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_reserved as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! (
                __fpu_reserved ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) . __fpu_fcw
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_fcw )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) . __fpu_fsw
                as * const _ as usize } , 10usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_fsw )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) . __fpu_ftw
                as * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ftw )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_rsrv1 as * const _ as usize } , 13usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_rsrv1
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) . __fpu_fop
                as * const _ as usize } , 14usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_fop )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) . __fpu_ip
                as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ip )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) . __fpu_cs
                as * const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_cs )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_rsrv2 as * const _ as usize } , 22usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_rsrv2
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) . __fpu_dp
                as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_dp )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) . __fpu_ds
                as * const _ as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ds )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_rsrv3 as * const _ as usize } , 30usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_rsrv3
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_mxcsr as * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_mxcsr
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_mxcsrmask as * const _ as usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! (
                __fpu_mxcsrmask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_stmm0 as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_stmm0
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_stmm1 as * const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_stmm1
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_stmm2 as * const _ as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_stmm2
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_stmm3 as * const _ as usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_stmm3
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_stmm4 as * const _ as usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_stmm4
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_stmm5 as * const _ as usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_stmm5
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_stmm6 as * const _ as usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_stmm6
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_stmm7 as * const _ as usize } , 152usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_stmm7
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) . __fpu_xmm0
                as * const _ as usize } , 168usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm0 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) . __fpu_xmm1
                as * const _ as usize } , 184usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm1 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) . __fpu_xmm2
                as * const _ as usize } , 200usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm2 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) . __fpu_xmm3
                as * const _ as usize } , 216usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm3 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) . __fpu_xmm4
                as * const _ as usize } , 232usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm4 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) . __fpu_xmm5
                as * const _ as usize } , 248usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm5 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) . __fpu_xmm6
                as * const _ as usize } , 264usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm6 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) . __fpu_xmm7
                as * const _ as usize } , 280usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm7 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) . __fpu_xmm8
                as * const _ as usize } , 296usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm8 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) . __fpu_xmm9
                as * const _ as usize } , 312usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm9 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_xmm10 as * const _ as usize } , 328usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm10
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_xmm11 as * const _ as usize } , 344usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm11
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_xmm12 as * const _ as usize } , 360usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm12
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_xmm13 as * const _ as usize } , 376usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm13
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_xmm14 as * const _ as usize } , 392usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm14
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_xmm15 as * const _ as usize } , 408usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_xmm15
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_rsrv4 as * const _ as usize } , 424usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_rsrv4
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_reserved1 as * const _ as usize } , 520usize , concat !
                (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! (
                __fpu_reserved1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __avx_reserved1 as * const _ as usize } , 524usize , concat !
                (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! (
                __avx_reserved1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_ymmh0 as * const _ as usize } , 588usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh0
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_ymmh1 as * const _ as usize } , 604usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh1
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_ymmh2 as * const _ as usize } , 620usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh2
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_ymmh3 as * const _ as usize } , 636usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh3
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_ymmh4 as * const _ as usize } , 652usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh4
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_ymmh5 as * const _ as usize } , 668usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh5
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_ymmh6 as * const _ as usize } , 684usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh6
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_ymmh7 as * const _ as usize } , 700usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh7
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_ymmh8 as * const _ as usize } , 716usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh8
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_ymmh9 as * const _ as usize } , 732usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh9
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_ymmh10 as * const _ as usize } , 748usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh10
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_ymmh11 as * const _ as usize } , 764usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh11
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_ymmh12 as * const _ as usize } , 780usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh12
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_ymmh13 as * const _ as usize } , 796usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh13
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_ymmh14 as * const _ as usize } , 812usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh14
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_avx_state64 ) ) .
                __fpu_ymmh15 as * const _ as usize } , 828usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_avx_state64 ) , "::" , stringify ! ( __fpu_ymmh15
                ) ));
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __darwin_x86_exception_state64 {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_exception_state64() {
    assert_eq!(::std::mem::size_of::<__darwin_x86_exception_state64>() ,
               16usize , concat ! (
               "Size of: " , stringify ! ( __darwin_x86_exception_state64 )
               ));
    assert_eq! (::std::mem::align_of::<__darwin_x86_exception_state64>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! ( __darwin_x86_exception_state64
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_exception_state64 ) ) .
                __trapno as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_exception_state64 ) , "::" , stringify ! (
                __trapno ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_exception_state64 ) ) .
                __cpu as * const _ as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_exception_state64 ) , "::" , stringify ! ( __cpu
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_exception_state64 ) ) .
                __err as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_exception_state64 ) , "::" , stringify ! ( __err
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_exception_state64 ) ) .
                __faultvaddr as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_exception_state64 ) , "::" , stringify ! (
                __faultvaddr ) ));
}
impl Clone for __darwin_x86_exception_state64 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __darwin_x86_debug_state64 {
    pub __dr0: __uint64_t,
    pub __dr1: __uint64_t,
    pub __dr2: __uint64_t,
    pub __dr3: __uint64_t,
    pub __dr4: __uint64_t,
    pub __dr5: __uint64_t,
    pub __dr6: __uint64_t,
    pub __dr7: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_debug_state64() {
    assert_eq!(::std::mem::size_of::<__darwin_x86_debug_state64>() , 64usize ,
               concat ! (
               "Size of: " , stringify ! ( __darwin_x86_debug_state64 ) ));
    assert_eq! (::std::mem::align_of::<__darwin_x86_debug_state64>() , 8usize
                , concat ! (
                "Alignment of " , stringify ! ( __darwin_x86_debug_state64 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_debug_state64 ) ) . __dr0 as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_debug_state64 ) , "::" , stringify ! ( __dr0 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_debug_state64 ) ) . __dr1 as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_debug_state64 ) , "::" , stringify ! ( __dr1 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_debug_state64 ) ) . __dr2 as
                * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_debug_state64 ) , "::" , stringify ! ( __dr2 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_debug_state64 ) ) . __dr3 as
                * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_debug_state64 ) , "::" , stringify ! ( __dr3 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_debug_state64 ) ) . __dr4 as
                * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_debug_state64 ) , "::" , stringify ! ( __dr4 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_debug_state64 ) ) . __dr5 as
                * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_debug_state64 ) , "::" , stringify ! ( __dr5 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_debug_state64 ) ) . __dr6 as
                * const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_debug_state64 ) , "::" , stringify ! ( __dr6 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_x86_debug_state64 ) ) . __dr7 as
                * const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! (
                __darwin_x86_debug_state64 ) , "::" , stringify ! ( __dr7 )
                ));
}
impl Clone for __darwin_x86_debug_state64 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
pub struct __darwin_mcontext32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_float_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext32() {
    assert_eq!(::std::mem::size_of::<__darwin_mcontext32>() , 600usize ,
               concat ! ( "Size of: " , stringify ! ( __darwin_mcontext32 )
               ));
    assert_eq! (::std::mem::align_of::<__darwin_mcontext32>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( __darwin_mcontext32 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_mcontext32 ) ) . __es as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_mcontext32 ) ,
                "::" , stringify ! ( __es ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_mcontext32 ) ) . __ss as * const
                _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_mcontext32 ) ,
                "::" , stringify ! ( __ss ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_mcontext32 ) ) . __fs as * const
                _ as usize } , 76usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_mcontext32 ) ,
                "::" , stringify ! ( __fs ) ));
}
#[repr(C)]
pub struct __darwin_mcontext_avx32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_avx_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx32() {
    assert_eq!(::std::mem::size_of::<__darwin_mcontext_avx32>() , 792usize ,
               concat ! (
               "Size of: " , stringify ! ( __darwin_mcontext_avx32 ) ));
    assert_eq! (::std::mem::align_of::<__darwin_mcontext_avx32>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( __darwin_mcontext_avx32 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_mcontext_avx32 ) ) . __es as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_mcontext_avx32
                ) , "::" , stringify ! ( __es ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_mcontext_avx32 ) ) . __ss as *
                const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_mcontext_avx32
                ) , "::" , stringify ! ( __ss ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_mcontext_avx32 ) ) . __fs as *
                const _ as usize } , 76usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_mcontext_avx32
                ) , "::" , stringify ! ( __fs ) ));
}
#[repr(C)]
pub struct __darwin_mcontext64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_float_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext64() {
    assert_eq!(::std::mem::size_of::<__darwin_mcontext64>() , 712usize ,
               concat ! ( "Size of: " , stringify ! ( __darwin_mcontext64 )
               ));
    assert_eq! (::std::mem::align_of::<__darwin_mcontext64>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( __darwin_mcontext64 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_mcontext64 ) ) . __es as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_mcontext64 ) ,
                "::" , stringify ! ( __es ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_mcontext64 ) ) . __ss as * const
                _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_mcontext64 ) ,
                "::" , stringify ! ( __ss ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_mcontext64 ) ) . __fs as * const
                _ as usize } , 184usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_mcontext64 ) ,
                "::" , stringify ! ( __fs ) ));
}
#[repr(C)]
pub struct __darwin_mcontext_avx64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_avx_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx64() {
    assert_eq!(::std::mem::size_of::<__darwin_mcontext_avx64>() , 1032usize ,
               concat ! (
               "Size of: " , stringify ! ( __darwin_mcontext_avx64 ) ));
    assert_eq! (::std::mem::align_of::<__darwin_mcontext_avx64>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( __darwin_mcontext_avx64 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_mcontext_avx64 ) ) . __es as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_mcontext_avx64
                ) , "::" , stringify ! ( __es ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_mcontext_avx64 ) ) . __ss as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_mcontext_avx64
                ) , "::" , stringify ! ( __ss ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_mcontext_avx64 ) ) . __fs as *
                const _ as usize } , 184usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_mcontext_avx64
                ) , "::" , stringify ! ( __fs ) ));
}
pub type mcontext_t = *mut __darwin_mcontext64;
pub type pthread_attr_t = __darwin_pthread_attr_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __darwin_sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_sigaltstack() {
    assert_eq!(::std::mem::size_of::<__darwin_sigaltstack>() , 24usize ,
               concat ! ( "Size of: " , stringify ! ( __darwin_sigaltstack )
               ));
    assert_eq! (::std::mem::align_of::<__darwin_sigaltstack>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( __darwin_sigaltstack ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_sigaltstack ) ) . ss_sp as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_sigaltstack )
                , "::" , stringify ! ( ss_sp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_sigaltstack ) ) . ss_size as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_sigaltstack )
                , "::" , stringify ! ( ss_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_sigaltstack ) ) . ss_flags as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_sigaltstack )
                , "::" , stringify ! ( ss_flags ) ));
}
impl Clone for __darwin_sigaltstack {
    fn clone(&self) -> Self { *self }
}
pub type stack_t = __darwin_sigaltstack;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __darwin_ucontext {
    pub uc_onstack: ::std::os::raw::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: __darwin_sigaltstack,
    pub uc_link: *mut __darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut __darwin_mcontext64,
}
#[test]
fn bindgen_test_layout___darwin_ucontext() {
    assert_eq!(::std::mem::size_of::<__darwin_ucontext>() , 56usize , concat !
               ( "Size of: " , stringify ! ( __darwin_ucontext ) ));
    assert_eq! (::std::mem::align_of::<__darwin_ucontext>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( __darwin_ucontext ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_ucontext ) ) . uc_onstack as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_ucontext ) ,
                "::" , stringify ! ( uc_onstack ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_ucontext ) ) . uc_sigmask as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_ucontext ) ,
                "::" , stringify ! ( uc_sigmask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_ucontext ) ) . uc_stack as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_ucontext ) ,
                "::" , stringify ! ( uc_stack ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_ucontext ) ) . uc_link as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_ucontext ) ,
                "::" , stringify ! ( uc_link ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_ucontext ) ) . uc_mcsize as *
                const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_ucontext ) ,
                "::" , stringify ! ( uc_mcsize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __darwin_ucontext ) ) . uc_mcontext as *
                const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( __darwin_ucontext ) ,
                "::" , stringify ! ( uc_mcontext ) ));
}
impl Clone for __darwin_ucontext {
    fn clone(&self) -> Self { *self }
}
pub type ucontext_t = __darwin_ucontext;
pub type sigset_t = __darwin_sigset_t;
pub type uid_t = __darwin_uid_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigval {
    pub sival_int: __BindgenUnionField<::std::os::raw::c_int>,
    pub sival_ptr: __BindgenUnionField<*mut ::std::os::raw::c_void>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_sigval() {
    assert_eq!(::std::mem::size_of::<sigval>() , 8usize , concat ! (
               "Size of: " , stringify ! ( sigval ) ));
    assert_eq! (::std::mem::align_of::<sigval>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( sigval ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigval ) ) . sival_int as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigval ) , "::" ,
                stringify ! ( sival_int ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigval ) ) . sival_ptr as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigval ) , "::" ,
                stringify ! ( sival_ptr ) ));
}
impl Clone for sigval {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigevent {
    pub sigev_notify: ::std::os::raw::c_int,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_value: sigval,
    pub sigev_notify_function: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                              sigval)>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
#[test]
fn bindgen_test_layout_sigevent() {
    assert_eq!(::std::mem::size_of::<sigevent>() , 32usize , concat ! (
               "Size of: " , stringify ! ( sigevent ) ));
    assert_eq! (::std::mem::align_of::<sigevent>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( sigevent ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent ) ) . sigev_notify as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigevent ) , "::" ,
                stringify ! ( sigev_notify ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent ) ) . sigev_signo as * const _
                as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( sigevent ) , "::" ,
                stringify ! ( sigev_signo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent ) ) . sigev_value as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( sigevent ) , "::" ,
                stringify ! ( sigev_value ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent ) ) . sigev_notify_function as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( sigevent ) , "::" ,
                stringify ! ( sigev_notify_function ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigevent ) ) . sigev_notify_attributes as
                * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( sigevent ) , "::" ,
                stringify ! ( sigev_notify_attributes ) ));
}
impl Clone for sigevent {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_value: sigval,
    pub si_band: ::std::os::raw::c_long,
    pub __pad: [::std::os::raw::c_ulong; 7usize],
}
#[test]
fn bindgen_test_layout___siginfo() {
    assert_eq!(::std::mem::size_of::<__siginfo>() , 104usize , concat ! (
               "Size of: " , stringify ! ( __siginfo ) ));
    assert_eq! (::std::mem::align_of::<__siginfo>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __siginfo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __siginfo ) ) . si_signo as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __siginfo ) , "::" ,
                stringify ! ( si_signo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __siginfo ) ) . si_errno as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( __siginfo ) , "::" ,
                stringify ! ( si_errno ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __siginfo ) ) . si_code as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __siginfo ) , "::" ,
                stringify ! ( si_code ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __siginfo ) ) . si_pid as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( __siginfo ) , "::" ,
                stringify ! ( si_pid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __siginfo ) ) . si_uid as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( __siginfo ) , "::" ,
                stringify ! ( si_uid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __siginfo ) ) . si_status as * const _ as
                usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( __siginfo ) , "::" ,
                stringify ! ( si_status ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __siginfo ) ) . si_addr as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( __siginfo ) , "::" ,
                stringify ! ( si_addr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __siginfo ) ) . si_value as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( __siginfo ) , "::" ,
                stringify ! ( si_value ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __siginfo ) ) . si_band as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( __siginfo ) , "::" ,
                stringify ! ( si_band ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __siginfo ) ) . __pad as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( __siginfo ) , "::" ,
                stringify ! ( __pad ) ));
}
impl Clone for __siginfo {
    fn clone(&self) -> Self { *self }
}
pub type siginfo_t = __siginfo;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __sigaction_u {
    pub __sa_handler: __BindgenUnionField<::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                         ::std::os::raw::c_int)>>,
    pub __sa_sigaction: __BindgenUnionField<::std::option::Option<unsafe extern "C" fn(arg1:
                                                                                           ::std::os::raw::c_int,
                                                                                       arg2:
                                                                                           *mut __siginfo,
                                                                                       arg3:
                                                                                           *mut ::std::os::raw::c_void)>>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout___sigaction_u() {
    assert_eq!(::std::mem::size_of::<__sigaction_u>() , 8usize , concat ! (
               "Size of: " , stringify ! ( __sigaction_u ) ));
    assert_eq! (::std::mem::align_of::<__sigaction_u>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __sigaction_u ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sigaction_u ) ) . __sa_handler as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __sigaction_u ) , "::"
                , stringify ! ( __sa_handler ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sigaction_u ) ) . __sa_sigaction as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __sigaction_u ) , "::"
                , stringify ! ( __sa_sigaction ) ));
}
impl Clone for __sigaction_u {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_tramp: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                 *mut ::std::os::raw::c_void,
                                                             arg2:
                                                                 ::std::os::raw::c_int,
                                                             arg3:
                                                                 ::std::os::raw::c_int,
                                                             arg4:
                                                                 *mut siginfo_t,
                                                             arg5:
                                                                 *mut ::std::os::raw::c_void)>,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sigaction() {
    assert_eq!(::std::mem::size_of::<__sigaction>() , 24usize , concat ! (
               "Size of: " , stringify ! ( __sigaction ) ));
    assert_eq! (::std::mem::align_of::<__sigaction>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __sigaction ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sigaction ) ) . __sigaction_u as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __sigaction ) , "::" ,
                stringify ! ( __sigaction_u ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sigaction ) ) . sa_tramp as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __sigaction ) , "::" ,
                stringify ! ( sa_tramp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sigaction ) ) . sa_mask as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( __sigaction ) , "::" ,
                stringify ! ( sa_mask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sigaction ) ) . sa_flags as * const _
                as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( __sigaction ) , "::" ,
                stringify ! ( sa_flags ) ));
}
impl Clone for __sigaction {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigaction() {
    assert_eq!(::std::mem::size_of::<sigaction>() , 16usize , concat ! (
               "Size of: " , stringify ! ( sigaction ) ));
    assert_eq! (::std::mem::align_of::<sigaction>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( sigaction ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigaction ) ) . __sigaction_u as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigaction ) , "::" ,
                stringify ! ( __sigaction_u ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigaction ) ) . sa_mask as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( sigaction ) , "::" ,
                stringify ! ( sa_mask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigaction ) ) . sa_flags as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( sigaction ) , "::" ,
                stringify ! ( sa_flags ) ));
}
impl Clone for sigaction {
    fn clone(&self) -> Self { *self }
}
pub type sig_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigvec {
    pub sv_handler: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                   ::std::os::raw::c_int)>,
    pub sv_mask: ::std::os::raw::c_int,
    pub sv_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigvec() {
    assert_eq!(::std::mem::size_of::<sigvec>() , 16usize , concat ! (
               "Size of: " , stringify ! ( sigvec ) ));
    assert_eq! (::std::mem::align_of::<sigvec>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( sigvec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigvec ) ) . sv_handler as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigvec ) , "::" ,
                stringify ! ( sv_handler ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigvec ) ) . sv_mask as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( sigvec ) , "::" ,
                stringify ! ( sv_mask ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigvec ) ) . sv_flags as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( sigvec ) , "::" ,
                stringify ! ( sv_flags ) ));
}
impl Clone for sigvec {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_char,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigstack() {
    assert_eq!(::std::mem::size_of::<sigstack>() , 16usize , concat ! (
               "Size of: " , stringify ! ( sigstack ) ));
    assert_eq! (::std::mem::align_of::<sigstack>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( sigstack ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigstack ) ) . ss_sp as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( sigstack ) , "::" ,
                stringify ! ( ss_sp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const sigstack ) ) . ss_onstack as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( sigstack ) , "::" ,
                stringify ! ( ss_onstack ) ));
}
impl Clone for sigstack {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn signal(arg1: ::std::os::raw::c_int,
                  arg2:
                      ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     ::std::os::raw::c_int)>)
     -> ::std::option::Option<unsafe extern "C" fn()>;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(::std::mem::size_of::<timeval>() , 16usize , concat ! (
               "Size of: " , stringify ! ( timeval ) ));
    assert_eq! (::std::mem::align_of::<timeval>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( timeval ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timeval ) ) . tv_sec as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( timeval ) , "::" ,
                stringify ! ( tv_sec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timeval ) ) . tv_usec as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( timeval ) , "::" ,
                stringify ! ( tv_usec ) ));
}
impl Clone for timeval {
    fn clone(&self) -> Self { *self }
}
pub type rlim_t = __uint64_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rusage {
    pub ru_utime: timeval,
    pub ru_stime: timeval,
    pub ru_maxrss: ::std::os::raw::c_long,
    pub ru_ixrss: ::std::os::raw::c_long,
    pub ru_idrss: ::std::os::raw::c_long,
    pub ru_isrss: ::std::os::raw::c_long,
    pub ru_minflt: ::std::os::raw::c_long,
    pub ru_majflt: ::std::os::raw::c_long,
    pub ru_nswap: ::std::os::raw::c_long,
    pub ru_inblock: ::std::os::raw::c_long,
    pub ru_oublock: ::std::os::raw::c_long,
    pub ru_msgsnd: ::std::os::raw::c_long,
    pub ru_msgrcv: ::std::os::raw::c_long,
    pub ru_nsignals: ::std::os::raw::c_long,
    pub ru_nvcsw: ::std::os::raw::c_long,
    pub ru_nivcsw: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_rusage() {
    assert_eq!(::std::mem::size_of::<rusage>() , 144usize , concat ! (
               "Size of: " , stringify ! ( rusage ) ));
    assert_eq! (::std::mem::align_of::<rusage>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( rusage ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage ) ) . ru_utime as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage ) , "::" ,
                stringify ! ( ru_utime ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage ) ) . ru_stime as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage ) , "::" ,
                stringify ! ( ru_stime ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage ) ) . ru_maxrss as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage ) , "::" ,
                stringify ! ( ru_maxrss ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage ) ) . ru_ixrss as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage ) , "::" ,
                stringify ! ( ru_ixrss ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage ) ) . ru_idrss as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage ) , "::" ,
                stringify ! ( ru_idrss ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage ) ) . ru_isrss as * const _ as
                usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage ) , "::" ,
                stringify ! ( ru_isrss ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage ) ) . ru_minflt as * const _ as
                usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage ) , "::" ,
                stringify ! ( ru_minflt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage ) ) . ru_majflt as * const _ as
                usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage ) , "::" ,
                stringify ! ( ru_majflt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage ) ) . ru_nswap as * const _ as
                usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage ) , "::" ,
                stringify ! ( ru_nswap ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage ) ) . ru_inblock as * const _ as
                usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage ) , "::" ,
                stringify ! ( ru_inblock ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage ) ) . ru_oublock as * const _ as
                usize } , 96usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage ) , "::" ,
                stringify ! ( ru_oublock ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage ) ) . ru_msgsnd as * const _ as
                usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage ) , "::" ,
                stringify ! ( ru_msgsnd ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage ) ) . ru_msgrcv as * const _ as
                usize } , 112usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage ) , "::" ,
                stringify ! ( ru_msgrcv ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage ) ) . ru_nsignals as * const _ as
                usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage ) , "::" ,
                stringify ! ( ru_nsignals ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage ) ) . ru_nvcsw as * const _ as
                usize } , 128usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage ) , "::" ,
                stringify ! ( ru_nvcsw ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage ) ) . ru_nivcsw as * const _ as
                usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage ) , "::" ,
                stringify ! ( ru_nivcsw ) ));
}
impl Clone for rusage {
    fn clone(&self) -> Self { *self }
}
pub type rusage_info_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rusage_info_v0 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v0() {
    assert_eq!(::std::mem::size_of::<rusage_info_v0>() , 96usize , concat ! (
               "Size of: " , stringify ! ( rusage_info_v0 ) ));
    assert_eq! (::std::mem::align_of::<rusage_info_v0>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( rusage_info_v0 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v0 ) ) . ri_uuid as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v0 ) , "::"
                , stringify ! ( ri_uuid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v0 ) ) . ri_user_time as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v0 ) , "::"
                , stringify ! ( ri_user_time ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v0 ) ) . ri_system_time as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v0 ) , "::"
                , stringify ! ( ri_system_time ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v0 ) ) . ri_pkg_idle_wkups as
                * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v0 ) , "::"
                , stringify ! ( ri_pkg_idle_wkups ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v0 ) ) . ri_interrupt_wkups
                as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v0 ) , "::"
                , stringify ! ( ri_interrupt_wkups ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v0 ) ) . ri_pageins as *
                const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v0 ) , "::"
                , stringify ! ( ri_pageins ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v0 ) ) . ri_wired_size as *
                const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v0 ) , "::"
                , stringify ! ( ri_wired_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v0 ) ) . ri_resident_size as
                * const _ as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v0 ) , "::"
                , stringify ! ( ri_resident_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v0 ) ) . ri_phys_footprint as
                * const _ as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v0 ) , "::"
                , stringify ! ( ri_phys_footprint ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v0 ) ) .
                ri_proc_start_abstime as * const _ as usize } , 80usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v0 ) , "::"
                , stringify ! ( ri_proc_start_abstime ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v0 ) ) . ri_proc_exit_abstime
                as * const _ as usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v0 ) , "::"
                , stringify ! ( ri_proc_exit_abstime ) ));
}
impl Clone for rusage_info_v0 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rusage_info_v1 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v1() {
    assert_eq!(::std::mem::size_of::<rusage_info_v1>() , 144usize , concat ! (
               "Size of: " , stringify ! ( rusage_info_v1 ) ));
    assert_eq! (::std::mem::align_of::<rusage_info_v1>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( rusage_info_v1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v1 ) ) . ri_uuid as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v1 ) , "::"
                , stringify ! ( ri_uuid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v1 ) ) . ri_user_time as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v1 ) , "::"
                , stringify ! ( ri_user_time ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v1 ) ) . ri_system_time as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v1 ) , "::"
                , stringify ! ( ri_system_time ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v1 ) ) . ri_pkg_idle_wkups as
                * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v1 ) , "::"
                , stringify ! ( ri_pkg_idle_wkups ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v1 ) ) . ri_interrupt_wkups
                as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v1 ) , "::"
                , stringify ! ( ri_interrupt_wkups ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v1 ) ) . ri_pageins as *
                const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v1 ) , "::"
                , stringify ! ( ri_pageins ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v1 ) ) . ri_wired_size as *
                const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v1 ) , "::"
                , stringify ! ( ri_wired_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v1 ) ) . ri_resident_size as
                * const _ as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v1 ) , "::"
                , stringify ! ( ri_resident_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v1 ) ) . ri_phys_footprint as
                * const _ as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v1 ) , "::"
                , stringify ! ( ri_phys_footprint ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v1 ) ) .
                ri_proc_start_abstime as * const _ as usize } , 80usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v1 ) , "::"
                , stringify ! ( ri_proc_start_abstime ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v1 ) ) . ri_proc_exit_abstime
                as * const _ as usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v1 ) , "::"
                , stringify ! ( ri_proc_exit_abstime ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v1 ) ) . ri_child_user_time
                as * const _ as usize } , 96usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v1 ) , "::"
                , stringify ! ( ri_child_user_time ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v1 ) ) . ri_child_system_time
                as * const _ as usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v1 ) , "::"
                , stringify ! ( ri_child_system_time ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v1 ) ) .
                ri_child_pkg_idle_wkups as * const _ as usize } , 112usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v1 ) , "::"
                , stringify ! ( ri_child_pkg_idle_wkups ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v1 ) ) .
                ri_child_interrupt_wkups as * const _ as usize } , 120usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v1 ) , "::"
                , stringify ! ( ri_child_interrupt_wkups ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v1 ) ) . ri_child_pageins as
                * const _ as usize } , 128usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v1 ) , "::"
                , stringify ! ( ri_child_pageins ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v1 ) ) .
                ri_child_elapsed_abstime as * const _ as usize } , 136usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v1 ) , "::"
                , stringify ! ( ri_child_elapsed_abstime ) ));
}
impl Clone for rusage_info_v1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rusage_info_v2 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v2() {
    assert_eq!(::std::mem::size_of::<rusage_info_v2>() , 160usize , concat ! (
               "Size of: " , stringify ! ( rusage_info_v2 ) ));
    assert_eq! (::std::mem::align_of::<rusage_info_v2>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( rusage_info_v2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v2 ) ) . ri_uuid as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v2 ) , "::"
                , stringify ! ( ri_uuid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v2 ) ) . ri_user_time as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v2 ) , "::"
                , stringify ! ( ri_user_time ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v2 ) ) . ri_system_time as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v2 ) , "::"
                , stringify ! ( ri_system_time ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v2 ) ) . ri_pkg_idle_wkups as
                * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v2 ) , "::"
                , stringify ! ( ri_pkg_idle_wkups ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v2 ) ) . ri_interrupt_wkups
                as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v2 ) , "::"
                , stringify ! ( ri_interrupt_wkups ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v2 ) ) . ri_pageins as *
                const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v2 ) , "::"
                , stringify ! ( ri_pageins ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v2 ) ) . ri_wired_size as *
                const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v2 ) , "::"
                , stringify ! ( ri_wired_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v2 ) ) . ri_resident_size as
                * const _ as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v2 ) , "::"
                , stringify ! ( ri_resident_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v2 ) ) . ri_phys_footprint as
                * const _ as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v2 ) , "::"
                , stringify ! ( ri_phys_footprint ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v2 ) ) .
                ri_proc_start_abstime as * const _ as usize } , 80usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v2 ) , "::"
                , stringify ! ( ri_proc_start_abstime ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v2 ) ) . ri_proc_exit_abstime
                as * const _ as usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v2 ) , "::"
                , stringify ! ( ri_proc_exit_abstime ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v2 ) ) . ri_child_user_time
                as * const _ as usize } , 96usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v2 ) , "::"
                , stringify ! ( ri_child_user_time ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v2 ) ) . ri_child_system_time
                as * const _ as usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v2 ) , "::"
                , stringify ! ( ri_child_system_time ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v2 ) ) .
                ri_child_pkg_idle_wkups as * const _ as usize } , 112usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v2 ) , "::"
                , stringify ! ( ri_child_pkg_idle_wkups ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v2 ) ) .
                ri_child_interrupt_wkups as * const _ as usize } , 120usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v2 ) , "::"
                , stringify ! ( ri_child_interrupt_wkups ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v2 ) ) . ri_child_pageins as
                * const _ as usize } , 128usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v2 ) , "::"
                , stringify ! ( ri_child_pageins ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v2 ) ) .
                ri_child_elapsed_abstime as * const _ as usize } , 136usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v2 ) , "::"
                , stringify ! ( ri_child_elapsed_abstime ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v2 ) ) . ri_diskio_bytesread
                as * const _ as usize } , 144usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v2 ) , "::"
                , stringify ! ( ri_diskio_bytesread ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v2 ) ) .
                ri_diskio_byteswritten as * const _ as usize } , 152usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v2 ) , "::"
                , stringify ! ( ri_diskio_byteswritten ) ));
}
impl Clone for rusage_info_v2 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rusage_info_v3 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v3() {
    assert_eq!(::std::mem::size_of::<rusage_info_v3>() , 232usize , concat ! (
               "Size of: " , stringify ! ( rusage_info_v3 ) ));
    assert_eq! (::std::mem::align_of::<rusage_info_v3>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( rusage_info_v3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v3 ) ) . ri_uuid as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v3 ) , "::"
                , stringify ! ( ri_uuid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v3 ) ) . ri_user_time as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v3 ) , "::"
                , stringify ! ( ri_user_time ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v3 ) ) . ri_system_time as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v3 ) , "::"
                , stringify ! ( ri_system_time ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v3 ) ) . ri_pkg_idle_wkups as
                * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v3 ) , "::"
                , stringify ! ( ri_pkg_idle_wkups ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v3 ) ) . ri_interrupt_wkups
                as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v3 ) , "::"
                , stringify ! ( ri_interrupt_wkups ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v3 ) ) . ri_pageins as *
                const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v3 ) , "::"
                , stringify ! ( ri_pageins ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v3 ) ) . ri_wired_size as *
                const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v3 ) , "::"
                , stringify ! ( ri_wired_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v3 ) ) . ri_resident_size as
                * const _ as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v3 ) , "::"
                , stringify ! ( ri_resident_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v3 ) ) . ri_phys_footprint as
                * const _ as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v3 ) , "::"
                , stringify ! ( ri_phys_footprint ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v3 ) ) .
                ri_proc_start_abstime as * const _ as usize } , 80usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v3 ) , "::"
                , stringify ! ( ri_proc_start_abstime ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v3 ) ) . ri_proc_exit_abstime
                as * const _ as usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v3 ) , "::"
                , stringify ! ( ri_proc_exit_abstime ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v3 ) ) . ri_child_user_time
                as * const _ as usize } , 96usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v3 ) , "::"
                , stringify ! ( ri_child_user_time ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v3 ) ) . ri_child_system_time
                as * const _ as usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v3 ) , "::"
                , stringify ! ( ri_child_system_time ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v3 ) ) .
                ri_child_pkg_idle_wkups as * const _ as usize } , 112usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v3 ) , "::"
                , stringify ! ( ri_child_pkg_idle_wkups ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v3 ) ) .
                ri_child_interrupt_wkups as * const _ as usize } , 120usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v3 ) , "::"
                , stringify ! ( ri_child_interrupt_wkups ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v3 ) ) . ri_child_pageins as
                * const _ as usize } , 128usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v3 ) , "::"
                , stringify ! ( ri_child_pageins ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v3 ) ) .
                ri_child_elapsed_abstime as * const _ as usize } , 136usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v3 ) , "::"
                , stringify ! ( ri_child_elapsed_abstime ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v3 ) ) . ri_diskio_bytesread
                as * const _ as usize } , 144usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v3 ) , "::"
                , stringify ! ( ri_diskio_bytesread ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v3 ) ) .
                ri_diskio_byteswritten as * const _ as usize } , 152usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v3 ) , "::"
                , stringify ! ( ri_diskio_byteswritten ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v3 ) ) .
                ri_cpu_time_qos_default as * const _ as usize } , 160usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v3 ) , "::"
                , stringify ! ( ri_cpu_time_qos_default ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v3 ) ) .
                ri_cpu_time_qos_maintenance as * const _ as usize } , 168usize
                , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v3 ) , "::"
                , stringify ! ( ri_cpu_time_qos_maintenance ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v3 ) ) .
                ri_cpu_time_qos_background as * const _ as usize } , 176usize
                , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v3 ) , "::"
                , stringify ! ( ri_cpu_time_qos_background ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v3 ) ) .
                ri_cpu_time_qos_utility as * const _ as usize } , 184usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v3 ) , "::"
                , stringify ! ( ri_cpu_time_qos_utility ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v3 ) ) .
                ri_cpu_time_qos_legacy as * const _ as usize } , 192usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v3 ) , "::"
                , stringify ! ( ri_cpu_time_qos_legacy ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v3 ) ) .
                ri_cpu_time_qos_user_initiated as * const _ as usize } ,
                200usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v3 ) , "::"
                , stringify ! ( ri_cpu_time_qos_user_initiated ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v3 ) ) .
                ri_cpu_time_qos_user_interactive as * const _ as usize } ,
                208usize , concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v3 ) , "::"
                , stringify ! ( ri_cpu_time_qos_user_interactive ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v3 ) ) .
                ri_billed_system_time as * const _ as usize } , 216usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v3 ) , "::"
                , stringify ! ( ri_billed_system_time ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rusage_info_v3 ) ) .
                ri_serviced_system_time as * const _ as usize } , 224usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( rusage_info_v3 ) , "::"
                , stringify ! ( ri_serviced_system_time ) ));
}
impl Clone for rusage_info_v3 {
    fn clone(&self) -> Self { *self }
}
pub type rusage_info_current = rusage_info_v3;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
#[test]
fn bindgen_test_layout_rlimit() {
    assert_eq!(::std::mem::size_of::<rlimit>() , 16usize , concat ! (
               "Size of: " , stringify ! ( rlimit ) ));
    assert_eq! (::std::mem::align_of::<rlimit>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( rlimit ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rlimit ) ) . rlim_cur as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( rlimit ) , "::" ,
                stringify ! ( rlim_cur ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const rlimit ) ) . rlim_max as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( rlimit ) , "::" ,
                stringify ! ( rlim_max ) ));
}
impl Clone for rlimit {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct proc_rlimit_control_wakeupmon {
    pub wm_flags: u32,
    pub wm_rate: i32,
}
#[test]
fn bindgen_test_layout_proc_rlimit_control_wakeupmon() {
    assert_eq!(::std::mem::size_of::<proc_rlimit_control_wakeupmon>() , 8usize
               , concat ! (
               "Size of: " , stringify ! ( proc_rlimit_control_wakeupmon ) ));
    assert_eq! (::std::mem::align_of::<proc_rlimit_control_wakeupmon>() ,
                4usize , concat ! (
                "Alignment of " , stringify ! ( proc_rlimit_control_wakeupmon
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const proc_rlimit_control_wakeupmon ) ) .
                wm_flags as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                proc_rlimit_control_wakeupmon ) , "::" , stringify ! (
                wm_flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const proc_rlimit_control_wakeupmon ) ) .
                wm_rate as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                proc_rlimit_control_wakeupmon ) , "::" , stringify ! ( wm_rate
                ) ));
}
impl Clone for proc_rlimit_control_wakeupmon {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn getpriority(arg1: ::std::os::raw::c_int, arg2: id_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getiopolicy_np(arg1: ::std::os::raw::c_int,
                          arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrlimit(arg1: ::std::os::raw::c_int, arg2: *mut rlimit)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrusage(arg1: ::std::os::raw::c_int, arg2: *mut rusage)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpriority(arg1: ::std::os::raw::c_int, arg2: id_t,
                       arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setiopolicy_np(arg1: ::std::os::raw::c_int,
                          arg2: ::std::os::raw::c_int,
                          arg3: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setrlimit(arg1: ::std::os::raw::c_int, arg2: *const rlimit)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct wait {
    pub w_status: __BindgenUnionField<::std::os::raw::c_int>,
    pub w_T: __BindgenUnionField<wait__bindgen_ty_1>,
    pub w_S: __BindgenUnionField<wait__bindgen_ty_2>,
    pub bindgen_union_field: u32,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_1: [u16; 2usize],
    pub __bindgen_align: [u32; 0usize],
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<wait__bindgen_ty_1>() , 4usize , concat !
               ( "Size of: " , stringify ! ( wait__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<wait__bindgen_ty_1>() , 4usize , concat
                ! ( "Alignment of " , stringify ! ( wait__bindgen_ty_1 ) ));
}
impl Clone for wait__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_1: [u16; 2usize],
    pub __bindgen_align: [u32; 0usize],
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<wait__bindgen_ty_2>() , 4usize , concat !
               ( "Size of: " , stringify ! ( wait__bindgen_ty_2 ) ));
    assert_eq! (::std::mem::align_of::<wait__bindgen_ty_2>() , 4usize , concat
                ! ( "Alignment of " , stringify ! ( wait__bindgen_ty_2 ) ));
}
impl Clone for wait__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_wait() {
    assert_eq!(::std::mem::size_of::<wait>() , 4usize , concat ! (
               "Size of: " , stringify ! ( wait ) ));
    assert_eq! (::std::mem::align_of::<wait>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( wait ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const wait ) ) . w_status as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( wait ) , "::" ,
                stringify ! ( w_status ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const wait ) ) . w_T as * const _ as usize } ,
                0usize , concat ! (
                "Alignment of field: " , stringify ! ( wait ) , "::" ,
                stringify ! ( w_T ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const wait ) ) . w_S as * const _ as usize } ,
                0usize , concat ! (
                "Alignment of field: " , stringify ! ( wait ) , "::" ,
                stringify ! ( w_S ) ));
}
impl Clone for wait {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn wait(arg1: *mut ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn waitpid(arg1: pid_t, arg2: *mut ::std::os::raw::c_int,
                   arg3: ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn waitid(arg1: idtype_t, arg2: id_t, arg3: *mut siginfo_t,
                  arg4: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wait3(arg1: *mut ::std::os::raw::c_int,
                 arg2: ::std::os::raw::c_int, arg3: *mut rusage) -> pid_t;
}
extern "C" {
    pub fn wait4(arg1: pid_t, arg2: *mut ::std::os::raw::c_int,
                 arg3: ::std::os::raw::c_int, arg4: *mut rusage) -> pid_t;
}
extern "C" {
    pub fn alloca(arg1: usize) -> *mut ::std::os::raw::c_void;
}
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(::std::mem::size_of::<div_t>() , 8usize , concat ! (
               "Size of: " , stringify ! ( div_t ) ));
    assert_eq! (::std::mem::align_of::<div_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( div_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const div_t ) ) . quot as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( div_t ) , "::" ,
                stringify ! ( quot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const div_t ) ) . rem as * const _ as usize } ,
                4usize , concat ! (
                "Alignment of field: " , stringify ! ( div_t ) , "::" ,
                stringify ! ( rem ) ));
}
impl Clone for div_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(::std::mem::size_of::<ldiv_t>() , 16usize , concat ! (
               "Size of: " , stringify ! ( ldiv_t ) ));
    assert_eq! (::std::mem::align_of::<ldiv_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( ldiv_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ldiv_t ) ) . quot as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ldiv_t ) , "::" ,
                stringify ! ( quot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ldiv_t ) ) . rem as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( ldiv_t ) , "::" ,
                stringify ! ( rem ) ));
}
impl Clone for ldiv_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(::std::mem::size_of::<lldiv_t>() , 16usize , concat ! (
               "Size of: " , stringify ! ( lldiv_t ) ));
    assert_eq! (::std::mem::align_of::<lldiv_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( lldiv_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lldiv_t ) ) . quot as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( lldiv_t ) , "::" ,
                stringify ! ( quot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lldiv_t ) ) . rem as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( lldiv_t ) , "::" ,
                stringify ! ( rem ) ));
}
impl Clone for lldiv_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "__mb_cur_max"]
    pub static mut __mb_cur_max: ::std::os::raw::c_int;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn abs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atof(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn bsearch(__key: *const ::std::os::raw::c_void,
                   __base: *const ::std::os::raw::c_void, __nel: usize,
                   __width: usize,
                   __compar:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *const ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *const ::std::os::raw::c_void)
                                                 -> ::std::os::raw::c_int>)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(__count: usize, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn div(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
     -> div_t;
}
extern "C" {
    pub fn exit(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn free(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn getenv(arg1: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn labs(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ldiv(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_long)
     -> ldiv_t;
}
extern "C" {
    pub fn llabs(arg1: ::std::os::raw::c_longlong)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lldiv(arg1: ::std::os::raw::c_longlong,
                 arg2: ::std::os::raw::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const ::std::os::raw::c_char,
                    arg3: usize) -> usize;
}
extern "C" {
    pub fn mbtowc(arg1: *mut wchar_t, arg2: *const ::std::os::raw::c_char,
                  arg3: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn posix_memalign(__memptr: *mut *mut ::std::os::raw::c_void,
                          __alignment: usize, __size: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qsort(__base: *mut ::std::os::raw::c_void, __nel: usize,
                 __width: usize,
                 __compar:
                     ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *const ::std::os::raw::c_void,
                                                                arg2:
                                                                    *const ::std::os::raw::c_void)
                                               -> ::std::os::raw::c_int>);
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realloc(__ptr: *mut ::std::os::raw::c_void, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn srand(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn strtod(arg1: *const ::std::os::raw::c_char,
                  arg2: *mut *mut ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn strtof(arg1: *const ::std::os::raw::c_char,
                  arg2: *mut *mut ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn strtol(__str: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtold(arg1: *const ::std::os::raw::c_char,
                   arg2: *mut *mut ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn strtoll(__str: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(__str: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(__str: *const ::std::os::raw::c_char,
                    __endptr: *mut *mut ::std::os::raw::c_char,
                    __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn system(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstombs(arg1: *mut ::std::os::raw::c_char, arg2: *const wchar_t,
                    arg3: usize) -> usize;
}
extern "C" {
    pub fn wctomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _Exit(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn a64l(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn ecvt(arg1: f64, arg2: ::std::os::raw::c_int,
                arg3: *mut ::std::os::raw::c_int,
                arg4: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn erand48(arg1: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn fcvt(arg1: f64, arg2: ::std::os::raw::c_int,
                arg3: *mut ::std::os::raw::c_int,
                arg4: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(arg1: f64, arg2: ::std::os::raw::c_int,
                arg3: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getsubopt(arg1: *mut *mut ::std::os::raw::c_char,
                     arg2: *const *const ::std::os::raw::c_char,
                     arg3: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn grantpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate(arg1: ::std::os::raw::c_uint,
                     arg2: *mut ::std::os::raw::c_char, arg3: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn jrand48(arg1: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn l64a(arg1: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn lcong48(arg1: *mut ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mktemp(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(arg1: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(arg1: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn posix_openpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptsname(arg1: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rand_r(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "realpath$DARWIN_EXTSN"]
    pub fn realpath(arg1: *const ::std::os::raw::c_char,
                    arg2: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn seed48(arg1: *mut ::std::os::raw::c_ushort)
     -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn setenv(__name: *const ::std::os::raw::c_char,
                  __value: *const ::std::os::raw::c_char,
                  __overwrite: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setkey(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn setstate(arg1: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn srand48(arg1: ::std::os::raw::c_long);
}
extern "C" {
    pub fn srandom(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn unlockpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type dev_t = __darwin_dev_t;
pub type mode_t = __darwin_mode_t;
extern "C" {
    pub fn arc4random() -> u32;
}
extern "C" {
    pub fn arc4random_addrandom(arg1: *mut ::std::os::raw::c_uchar,
                                arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void,
                          __nbytes: usize);
}
extern "C" {
    pub fn arc4random_stir();
}
extern "C" {
    pub fn arc4random_uniform(__upper_bound: u32) -> u32;
}
extern "C" {
    pub fn atexit_b(arg1: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsearch_b(__key: *const ::std::os::raw::c_void,
                     __base: *const ::std::os::raw::c_void, __nel: usize,
                     __width: usize, __compar: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cgetcap(arg1: *mut ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char,
                   arg3: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cgetclose() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetent(arg1: *mut *mut ::std::os::raw::c_char,
                   arg2: *mut *mut ::std::os::raw::c_char,
                   arg3: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetfirst(arg1: *mut *mut ::std::os::raw::c_char,
                     arg2: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetmatch(arg1: *const ::std::os::raw::c_char,
                     arg2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnext(arg1: *mut *mut ::std::os::raw::c_char,
                    arg2: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnum(arg1: *mut ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char,
                   arg3: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetset(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetstr(arg1: *mut ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char,
                   arg3: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetustr(arg1: *mut ::std::os::raw::c_char,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "daemon$1050"]
    pub fn daemon(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn devname(arg1: dev_t, arg2: mode_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn devname_r(arg1: dev_t, arg2: mode_t,
                     buf: *mut ::std::os::raw::c_char,
                     len: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getbsize(arg1: *mut ::std::os::raw::c_int,
                    arg2: *mut ::std::os::raw::c_long)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getloadavg(arg1: *mut f64, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprogname() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn heapsort(__base: *mut ::std::os::raw::c_void, __nel: usize,
                    __width: usize,
                    __compar:
                        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *const ::std::os::raw::c_void,
                                                                   arg2:
                                                                       *const ::std::os::raw::c_void)
                                                  -> ::std::os::raw::c_int>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn heapsort_b(__base: *mut ::std::os::raw::c_void, __nel: usize,
                      __width: usize, __compar: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort(__base: *mut ::std::os::raw::c_void, __nel: usize,
                     __width: usize,
                     __compar:
                         ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *const ::std::os::raw::c_void,
                                                                    arg2:
                                                                        *const ::std::os::raw::c_void)
                                                   -> ::std::os::raw::c_int>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort_b(__base: *mut ::std::os::raw::c_void, __nel: usize,
                       __width: usize, __compar: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psort(__base: *mut ::std::os::raw::c_void, __nel: usize,
                 __width: usize,
                 __compar:
                     ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *const ::std::os::raw::c_void,
                                                                arg2:
                                                                    *const ::std::os::raw::c_void)
                                               -> ::std::os::raw::c_int>);
}
extern "C" {
    pub fn psort_b(__base: *mut ::std::os::raw::c_void, __nel: usize,
                   __width: usize, __compar: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn psort_r(__base: *mut ::std::os::raw::c_void, __nel: usize,
                   __width: usize, arg1: *mut ::std::os::raw::c_void,
                   __compar:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *const ::std::os::raw::c_void,
                                                                  arg3:
                                                                      *const ::std::os::raw::c_void)
                                                 -> ::std::os::raw::c_int>);
}
extern "C" {
    pub fn qsort_b(__base: *mut ::std::os::raw::c_void, __nel: usize,
                   __width: usize, __compar: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn qsort_r(__base: *mut ::std::os::raw::c_void, __nel: usize,
                   __width: usize, arg1: *mut ::std::os::raw::c_void,
                   __compar:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *const ::std::os::raw::c_void,
                                                                  arg3:
                                                                      *const ::std::os::raw::c_void)
                                                 -> ::std::os::raw::c_int>);
}
extern "C" {
    pub fn radixsort(__base: *mut *const ::std::os::raw::c_uchar,
                     __nel: ::std::os::raw::c_int,
                     __table: *const ::std::os::raw::c_uchar,
                     __endbyte: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setprogname(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sradixsort(__base: *mut *const ::std::os::raw::c_uchar,
                      __nel: ::std::os::raw::c_int,
                      __table: *const ::std::os::raw::c_uchar,
                      __endbyte: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sranddev();
}
extern "C" {
    pub fn srandomdev();
}
extern "C" {
    pub fn reallocf(__ptr: *mut ::std::os::raw::c_void, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strtoq(__str: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(__str: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    #[link_name = "suboptarg"]
    pub static mut suboptarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn valloc(arg1: usize) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
pub struct crypto_hash_sha512_state {
    pub state: [u64; 8usize],
    pub count: [u64; 2usize],
    pub buf: [u8; 128usize],
}
#[test]
fn bindgen_test_layout_crypto_hash_sha512_state() {
    assert_eq!(::std::mem::size_of::<crypto_hash_sha512_state>() , 208usize ,
               concat ! (
               "Size of: " , stringify ! ( crypto_hash_sha512_state ) ));
    assert_eq! (::std::mem::align_of::<crypto_hash_sha512_state>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( crypto_hash_sha512_state ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const crypto_hash_sha512_state ) ) . state as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                crypto_hash_sha512_state ) , "::" , stringify ! ( state ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const crypto_hash_sha512_state ) ) . count as *
                const _ as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! (
                crypto_hash_sha512_state ) , "::" , stringify ! ( count ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const crypto_hash_sha512_state ) ) . buf as *
                const _ as usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! (
                crypto_hash_sha512_state ) , "::" , stringify ! ( buf ) ));
}
extern "C" {
    pub fn crypto_hash_sha512_statebytes() -> usize;
}
extern "C" {
    pub fn crypto_hash_sha512_bytes() -> usize;
}
extern "C" {
    pub fn crypto_hash_sha512(out: *mut ::std::os::raw::c_uchar,
                              in_: *const ::std::os::raw::c_uchar,
                              inlen: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_hash_sha512_init(state: *mut crypto_hash_sha512_state)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_hash_sha512_update(state: *mut crypto_hash_sha512_state,
                                     in_: *const ::std::os::raw::c_uchar,
                                     inlen: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_hash_sha512_final(state: *mut crypto_hash_sha512_state,
                                    out: *mut ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_auth_hmacsha512_bytes() -> usize;
}
extern "C" {
    pub fn crypto_auth_hmacsha512_keybytes() -> usize;
}
extern "C" {
    pub fn crypto_auth_hmacsha512(out: *mut ::std::os::raw::c_uchar,
                                  in_: *const ::std::os::raw::c_uchar,
                                  inlen: ::std::os::raw::c_ulonglong,
                                  k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_auth_hmacsha512_verify(h: *const ::std::os::raw::c_uchar,
                                         in_: *const ::std::os::raw::c_uchar,
                                         inlen: ::std::os::raw::c_ulonglong,
                                         k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct crypto_auth_hmacsha512_state {
    pub ictx: crypto_hash_sha512_state,
    pub octx: crypto_hash_sha512_state,
}
#[test]
fn bindgen_test_layout_crypto_auth_hmacsha512_state() {
    assert_eq!(::std::mem::size_of::<crypto_auth_hmacsha512_state>() ,
               416usize , concat ! (
               "Size of: " , stringify ! ( crypto_auth_hmacsha512_state ) ));
    assert_eq! (::std::mem::align_of::<crypto_auth_hmacsha512_state>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! ( crypto_auth_hmacsha512_state )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const crypto_auth_hmacsha512_state ) ) . ictx
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                crypto_auth_hmacsha512_state ) , "::" , stringify ! ( ictx )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const crypto_auth_hmacsha512_state ) ) . octx
                as * const _ as usize } , 208usize , concat ! (
                "Alignment of field: " , stringify ! (
                crypto_auth_hmacsha512_state ) , "::" , stringify ! ( octx )
                ));
}
extern "C" {
    pub fn crypto_auth_hmacsha512_statebytes() -> usize;
}
extern "C" {
    pub fn crypto_auth_hmacsha512_init(state:
                                           *mut crypto_auth_hmacsha512_state,
                                       key: *const ::std::os::raw::c_uchar,
                                       keylen: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_auth_hmacsha512_update(state:
                                             *mut crypto_auth_hmacsha512_state,
                                         in_: *const ::std::os::raw::c_uchar,
                                         inlen: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_auth_hmacsha512_final(state:
                                            *mut crypto_auth_hmacsha512_state,
                                        out: *mut ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_auth_hmacsha512_keygen(k: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn crypto_auth_hmacsha512256_bytes() -> usize;
}
extern "C" {
    pub fn crypto_auth_hmacsha512256_keybytes() -> usize;
}
extern "C" {
    pub fn crypto_auth_hmacsha512256(out: *mut ::std::os::raw::c_uchar,
                                     in_: *const ::std::os::raw::c_uchar,
                                     inlen: ::std::os::raw::c_ulonglong,
                                     k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_auth_hmacsha512256_verify(h: *const ::std::os::raw::c_uchar,
                                            in_:
                                                *const ::std::os::raw::c_uchar,
                                            inlen:
                                                ::std::os::raw::c_ulonglong,
                                            k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
pub type crypto_auth_hmacsha512256_state = crypto_auth_hmacsha512_state;
extern "C" {
    pub fn crypto_auth_hmacsha512256_statebytes() -> usize;
}
extern "C" {
    pub fn crypto_auth_hmacsha512256_init(state:
                                              *mut crypto_auth_hmacsha512256_state,
                                          key: *const ::std::os::raw::c_uchar,
                                          keylen: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_auth_hmacsha512256_update(state:
                                                *mut crypto_auth_hmacsha512256_state,
                                            in_:
                                                *const ::std::os::raw::c_uchar,
                                            inlen:
                                                ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_auth_hmacsha512256_final(state:
                                               *mut crypto_auth_hmacsha512256_state,
                                           out: *mut ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_auth_hmacsha512256_keygen(k: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn crypto_auth_bytes() -> usize;
}
extern "C" {
    pub fn crypto_auth_keybytes() -> usize;
}
extern "C" {
    pub fn crypto_auth_primitive() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn crypto_auth(out: *mut ::std::os::raw::c_uchar,
                       in_: *const ::std::os::raw::c_uchar,
                       inlen: ::std::os::raw::c_ulonglong,
                       k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_auth_verify(h: *const ::std::os::raw::c_uchar,
                              in_: *const ::std::os::raw::c_uchar,
                              inlen: ::std::os::raw::c_ulonglong,
                              k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_auth_keygen(k: *mut ::std::os::raw::c_uchar);
}
#[repr(C)]
pub struct crypto_hash_sha256_state {
    pub state: [u32; 8usize],
    pub count: u64,
    pub buf: [u8; 64usize],
}
#[test]
fn bindgen_test_layout_crypto_hash_sha256_state() {
    assert_eq!(::std::mem::size_of::<crypto_hash_sha256_state>() , 104usize ,
               concat ! (
               "Size of: " , stringify ! ( crypto_hash_sha256_state ) ));
    assert_eq! (::std::mem::align_of::<crypto_hash_sha256_state>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( crypto_hash_sha256_state ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const crypto_hash_sha256_state ) ) . state as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                crypto_hash_sha256_state ) , "::" , stringify ! ( state ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const crypto_hash_sha256_state ) ) . count as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! (
                crypto_hash_sha256_state ) , "::" , stringify ! ( count ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const crypto_hash_sha256_state ) ) . buf as *
                const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! (
                crypto_hash_sha256_state ) , "::" , stringify ! ( buf ) ));
}
extern "C" {
    pub fn crypto_hash_sha256_statebytes() -> usize;
}
extern "C" {
    pub fn crypto_hash_sha256_bytes() -> usize;
}
extern "C" {
    pub fn crypto_hash_sha256(out: *mut ::std::os::raw::c_uchar,
                              in_: *const ::std::os::raw::c_uchar,
                              inlen: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_hash_sha256_init(state: *mut crypto_hash_sha256_state)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_hash_sha256_update(state: *mut crypto_hash_sha256_state,
                                     in_: *const ::std::os::raw::c_uchar,
                                     inlen: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_hash_sha256_final(state: *mut crypto_hash_sha256_state,
                                    out: *mut ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_auth_hmacsha256_bytes() -> usize;
}
extern "C" {
    pub fn crypto_auth_hmacsha256_keybytes() -> usize;
}
extern "C" {
    pub fn crypto_auth_hmacsha256(out: *mut ::std::os::raw::c_uchar,
                                  in_: *const ::std::os::raw::c_uchar,
                                  inlen: ::std::os::raw::c_ulonglong,
                                  k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_auth_hmacsha256_verify(h: *const ::std::os::raw::c_uchar,
                                         in_: *const ::std::os::raw::c_uchar,
                                         inlen: ::std::os::raw::c_ulonglong,
                                         k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct crypto_auth_hmacsha256_state {
    pub ictx: crypto_hash_sha256_state,
    pub octx: crypto_hash_sha256_state,
}
#[test]
fn bindgen_test_layout_crypto_auth_hmacsha256_state() {
    assert_eq!(::std::mem::size_of::<crypto_auth_hmacsha256_state>() ,
               208usize , concat ! (
               "Size of: " , stringify ! ( crypto_auth_hmacsha256_state ) ));
    assert_eq! (::std::mem::align_of::<crypto_auth_hmacsha256_state>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! ( crypto_auth_hmacsha256_state )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const crypto_auth_hmacsha256_state ) ) . ictx
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                crypto_auth_hmacsha256_state ) , "::" , stringify ! ( ictx )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const crypto_auth_hmacsha256_state ) ) . octx
                as * const _ as usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! (
                crypto_auth_hmacsha256_state ) , "::" , stringify ! ( octx )
                ));
}
extern "C" {
    pub fn crypto_auth_hmacsha256_statebytes() -> usize;
}
extern "C" {
    pub fn crypto_auth_hmacsha256_init(state:
                                           *mut crypto_auth_hmacsha256_state,
                                       key: *const ::std::os::raw::c_uchar,
                                       keylen: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_auth_hmacsha256_update(state:
                                             *mut crypto_auth_hmacsha256_state,
                                         in_: *const ::std::os::raw::c_uchar,
                                         inlen: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_auth_hmacsha256_final(state:
                                            *mut crypto_auth_hmacsha256_state,
                                        out: *mut ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_auth_hmacsha256_keygen(k: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn crypto_box_curve25519xsalsa20poly1305_seedbytes() -> usize;
}
extern "C" {
    pub fn crypto_box_curve25519xsalsa20poly1305_publickeybytes() -> usize;
}
extern "C" {
    pub fn crypto_box_curve25519xsalsa20poly1305_secretkeybytes() -> usize;
}
extern "C" {
    pub fn crypto_box_curve25519xsalsa20poly1305_beforenmbytes() -> usize;
}
extern "C" {
    pub fn crypto_box_curve25519xsalsa20poly1305_noncebytes() -> usize;
}
extern "C" {
    pub fn crypto_box_curve25519xsalsa20poly1305_macbytes() -> usize;
}
extern "C" {
    pub fn crypto_box_curve25519xsalsa20poly1305_boxzerobytes() -> usize;
}
extern "C" {
    pub fn crypto_box_curve25519xsalsa20poly1305_zerobytes() -> usize;
}
extern "C" {
    pub fn crypto_box_curve25519xsalsa20poly1305(c:
                                                     *mut ::std::os::raw::c_uchar,
                                                 m:
                                                     *const ::std::os::raw::c_uchar,
                                                 mlen:
                                                     ::std::os::raw::c_ulonglong,
                                                 n:
                                                     *const ::std::os::raw::c_uchar,
                                                 pk:
                                                     *const ::std::os::raw::c_uchar,
                                                 sk:
                                                     *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_curve25519xsalsa20poly1305_open(m:
                                                          *mut ::std::os::raw::c_uchar,
                                                      c:
                                                          *const ::std::os::raw::c_uchar,
                                                      clen:
                                                          ::std::os::raw::c_ulonglong,
                                                      n:
                                                          *const ::std::os::raw::c_uchar,
                                                      pk:
                                                          *const ::std::os::raw::c_uchar,
                                                      sk:
                                                          *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_curve25519xsalsa20poly1305_seed_keypair(pk:
                                                                  *mut ::std::os::raw::c_uchar,
                                                              sk:
                                                                  *mut ::std::os::raw::c_uchar,
                                                              seed:
                                                                  *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_curve25519xsalsa20poly1305_keypair(pk:
                                                             *mut ::std::os::raw::c_uchar,
                                                         sk:
                                                             *mut ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_curve25519xsalsa20poly1305_beforenm(k:
                                                              *mut ::std::os::raw::c_uchar,
                                                          pk:
                                                              *const ::std::os::raw::c_uchar,
                                                          sk:
                                                              *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_curve25519xsalsa20poly1305_afternm(c:
                                                             *mut ::std::os::raw::c_uchar,
                                                         m:
                                                             *const ::std::os::raw::c_uchar,
                                                         mlen:
                                                             ::std::os::raw::c_ulonglong,
                                                         n:
                                                             *const ::std::os::raw::c_uchar,
                                                         k:
                                                             *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_curve25519xsalsa20poly1305_open_afternm(m:
                                                                  *mut ::std::os::raw::c_uchar,
                                                              c:
                                                                  *const ::std::os::raw::c_uchar,
                                                              clen:
                                                                  ::std::os::raw::c_ulonglong,
                                                              n:
                                                                  *const ::std::os::raw::c_uchar,
                                                              k:
                                                                  *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_seedbytes() -> usize;
}
extern "C" {
    pub fn crypto_box_publickeybytes() -> usize;
}
extern "C" {
    pub fn crypto_box_secretkeybytes() -> usize;
}
extern "C" {
    pub fn crypto_box_noncebytes() -> usize;
}
extern "C" {
    pub fn crypto_box_macbytes() -> usize;
}
extern "C" {
    pub fn crypto_box_primitive() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn crypto_box_seed_keypair(pk: *mut ::std::os::raw::c_uchar,
                                   sk: *mut ::std::os::raw::c_uchar,
                                   seed: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_keypair(pk: *mut ::std::os::raw::c_uchar,
                              sk: *mut ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_easy(c: *mut ::std::os::raw::c_uchar,
                           m: *const ::std::os::raw::c_uchar,
                           mlen: ::std::os::raw::c_ulonglong,
                           n: *const ::std::os::raw::c_uchar,
                           pk: *const ::std::os::raw::c_uchar,
                           sk: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_open_easy(m: *mut ::std::os::raw::c_uchar,
                                c: *const ::std::os::raw::c_uchar,
                                clen: ::std::os::raw::c_ulonglong,
                                n: *const ::std::os::raw::c_uchar,
                                pk: *const ::std::os::raw::c_uchar,
                                sk: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_detached(c: *mut ::std::os::raw::c_uchar,
                               mac: *mut ::std::os::raw::c_uchar,
                               m: *const ::std::os::raw::c_uchar,
                               mlen: ::std::os::raw::c_ulonglong,
                               n: *const ::std::os::raw::c_uchar,
                               pk: *const ::std::os::raw::c_uchar,
                               sk: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_open_detached(m: *mut ::std::os::raw::c_uchar,
                                    c: *const ::std::os::raw::c_uchar,
                                    mac: *const ::std::os::raw::c_uchar,
                                    clen: ::std::os::raw::c_ulonglong,
                                    n: *const ::std::os::raw::c_uchar,
                                    pk: *const ::std::os::raw::c_uchar,
                                    sk: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_beforenmbytes() -> usize;
}
extern "C" {
    pub fn crypto_box_beforenm(k: *mut ::std::os::raw::c_uchar,
                               pk: *const ::std::os::raw::c_uchar,
                               sk: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_easy_afternm(c: *mut ::std::os::raw::c_uchar,
                                   m: *const ::std::os::raw::c_uchar,
                                   mlen: ::std::os::raw::c_ulonglong,
                                   n: *const ::std::os::raw::c_uchar,
                                   k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_open_easy_afternm(m: *mut ::std::os::raw::c_uchar,
                                        c: *const ::std::os::raw::c_uchar,
                                        clen: ::std::os::raw::c_ulonglong,
                                        n: *const ::std::os::raw::c_uchar,
                                        k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_detached_afternm(c: *mut ::std::os::raw::c_uchar,
                                       mac: *mut ::std::os::raw::c_uchar,
                                       m: *const ::std::os::raw::c_uchar,
                                       mlen: ::std::os::raw::c_ulonglong,
                                       n: *const ::std::os::raw::c_uchar,
                                       k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_open_detached_afternm(m: *mut ::std::os::raw::c_uchar,
                                            c: *const ::std::os::raw::c_uchar,
                                            mac:
                                                *const ::std::os::raw::c_uchar,
                                            clen: ::std::os::raw::c_ulonglong,
                                            n: *const ::std::os::raw::c_uchar,
                                            k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_sealbytes() -> usize;
}
extern "C" {
    pub fn crypto_box_seal(c: *mut ::std::os::raw::c_uchar,
                           m: *const ::std::os::raw::c_uchar,
                           mlen: ::std::os::raw::c_ulonglong,
                           pk: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_seal_open(m: *mut ::std::os::raw::c_uchar,
                                c: *const ::std::os::raw::c_uchar,
                                clen: ::std::os::raw::c_ulonglong,
                                pk: *const ::std::os::raw::c_uchar,
                                sk: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_zerobytes() -> usize;
}
extern "C" {
    pub fn crypto_box_boxzerobytes() -> usize;
}
extern "C" {
    pub fn crypto_box(c: *mut ::std::os::raw::c_uchar,
                      m: *const ::std::os::raw::c_uchar,
                      mlen: ::std::os::raw::c_ulonglong,
                      n: *const ::std::os::raw::c_uchar,
                      pk: *const ::std::os::raw::c_uchar,
                      sk: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_open(m: *mut ::std::os::raw::c_uchar,
                           c: *const ::std::os::raw::c_uchar,
                           clen: ::std::os::raw::c_ulonglong,
                           n: *const ::std::os::raw::c_uchar,
                           pk: *const ::std::os::raw::c_uchar,
                           sk: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_afternm(c: *mut ::std::os::raw::c_uchar,
                              m: *const ::std::os::raw::c_uchar,
                              mlen: ::std::os::raw::c_ulonglong,
                              n: *const ::std::os::raw::c_uchar,
                              k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_open_afternm(m: *mut ::std::os::raw::c_uchar,
                                   c: *const ::std::os::raw::c_uchar,
                                   clen: ::std::os::raw::c_ulonglong,
                                   n: *const ::std::os::raw::c_uchar,
                                   k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_core_hsalsa20_outputbytes() -> usize;
}
extern "C" {
    pub fn crypto_core_hsalsa20_inputbytes() -> usize;
}
extern "C" {
    pub fn crypto_core_hsalsa20_keybytes() -> usize;
}
extern "C" {
    pub fn crypto_core_hsalsa20_constbytes() -> usize;
}
extern "C" {
    pub fn crypto_core_hsalsa20(out: *mut ::std::os::raw::c_uchar,
                                in_: *const ::std::os::raw::c_uchar,
                                k: *const ::std::os::raw::c_uchar,
                                c: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_core_hchacha20_outputbytes() -> usize;
}
extern "C" {
    pub fn crypto_core_hchacha20_inputbytes() -> usize;
}
extern "C" {
    pub fn crypto_core_hchacha20_keybytes() -> usize;
}
extern "C" {
    pub fn crypto_core_hchacha20_constbytes() -> usize;
}
extern "C" {
    pub fn crypto_core_hchacha20(out: *mut ::std::os::raw::c_uchar,
                                 in_: *const ::std::os::raw::c_uchar,
                                 k: *const ::std::os::raw::c_uchar,
                                 c: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_core_salsa20_outputbytes() -> usize;
}
extern "C" {
    pub fn crypto_core_salsa20_inputbytes() -> usize;
}
extern "C" {
    pub fn crypto_core_salsa20_keybytes() -> usize;
}
extern "C" {
    pub fn crypto_core_salsa20_constbytes() -> usize;
}
extern "C" {
    pub fn crypto_core_salsa20(out: *mut ::std::os::raw::c_uchar,
                               in_: *const ::std::os::raw::c_uchar,
                               k: *const ::std::os::raw::c_uchar,
                               c: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_core_salsa2012_outputbytes() -> usize;
}
extern "C" {
    pub fn crypto_core_salsa2012_inputbytes() -> usize;
}
extern "C" {
    pub fn crypto_core_salsa2012_keybytes() -> usize;
}
extern "C" {
    pub fn crypto_core_salsa2012_constbytes() -> usize;
}
extern "C" {
    pub fn crypto_core_salsa2012(out: *mut ::std::os::raw::c_uchar,
                                 in_: *const ::std::os::raw::c_uchar,
                                 k: *const ::std::os::raw::c_uchar,
                                 c: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_core_salsa208_outputbytes() -> usize;
}
extern "C" {
    pub fn crypto_core_salsa208_inputbytes() -> usize;
}
extern "C" {
    pub fn crypto_core_salsa208_keybytes() -> usize;
}
extern "C" {
    pub fn crypto_core_salsa208_constbytes() -> usize;
}
extern "C" {
    pub fn crypto_core_salsa208(out: *mut ::std::os::raw::c_uchar,
                                in_: *const ::std::os::raw::c_uchar,
                                k: *const ::std::os::raw::c_uchar,
                                c: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
pub struct crypto_generichash_blake2b_state {
    pub h: [u64; 8usize],
    pub t: [u64; 2usize],
    pub f: [u64; 2usize],
    pub buf: [u8; 256usize],
    pub buflen: usize,
    pub last_node: u8,
}
#[test]
fn bindgen_test_layout_crypto_generichash_blake2b_state() {
    assert_eq!(::std::mem::size_of::<crypto_generichash_blake2b_state>() ,
               361usize , concat ! (
               "Size of: " , stringify ! ( crypto_generichash_blake2b_state )
               ));
    assert_eq! (::std::mem::align_of::<crypto_generichash_blake2b_state>() ,
                1usize , concat ! (
                "Alignment of " , stringify ! (
                crypto_generichash_blake2b_state ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const crypto_generichash_blake2b_state ) ) . h
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                crypto_generichash_blake2b_state ) , "::" , stringify ! ( h )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const crypto_generichash_blake2b_state ) ) . t
                as * const _ as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! (
                crypto_generichash_blake2b_state ) , "::" , stringify ! ( t )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const crypto_generichash_blake2b_state ) ) . f
                as * const _ as usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! (
                crypto_generichash_blake2b_state ) , "::" , stringify ! ( f )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const crypto_generichash_blake2b_state ) ) .
                buf as * const _ as usize } , 96usize , concat ! (
                "Alignment of field: " , stringify ! (
                crypto_generichash_blake2b_state ) , "::" , stringify ! ( buf
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const crypto_generichash_blake2b_state ) ) .
                buflen as * const _ as usize } , 352usize , concat ! (
                "Alignment of field: " , stringify ! (
                crypto_generichash_blake2b_state ) , "::" , stringify ! (
                buflen ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const crypto_generichash_blake2b_state ) ) .
                last_node as * const _ as usize } , 360usize , concat ! (
                "Alignment of field: " , stringify ! (
                crypto_generichash_blake2b_state ) , "::" , stringify ! (
                last_node ) ));
}
extern "C" {
    pub fn crypto_generichash_blake2b_bytes_min() -> usize;
}
extern "C" {
    pub fn crypto_generichash_blake2b_bytes_max() -> usize;
}
extern "C" {
    pub fn crypto_generichash_blake2b_bytes() -> usize;
}
extern "C" {
    pub fn crypto_generichash_blake2b_keybytes_min() -> usize;
}
extern "C" {
    pub fn crypto_generichash_blake2b_keybytes_max() -> usize;
}
extern "C" {
    pub fn crypto_generichash_blake2b_keybytes() -> usize;
}
extern "C" {
    pub fn crypto_generichash_blake2b_saltbytes() -> usize;
}
extern "C" {
    pub fn crypto_generichash_blake2b_personalbytes() -> usize;
}
extern "C" {
    pub fn crypto_generichash_blake2b_statebytes() -> usize;
}
extern "C" {
    pub fn crypto_generichash_blake2b(out: *mut ::std::os::raw::c_uchar,
                                      outlen: usize,
                                      in_: *const ::std::os::raw::c_uchar,
                                      inlen: ::std::os::raw::c_ulonglong,
                                      key: *const ::std::os::raw::c_uchar,
                                      keylen: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_generichash_blake2b_salt_personal(out:
                                                        *mut ::std::os::raw::c_uchar,
                                                    outlen: usize,
                                                    in_:
                                                        *const ::std::os::raw::c_uchar,
                                                    inlen:
                                                        ::std::os::raw::c_ulonglong,
                                                    key:
                                                        *const ::std::os::raw::c_uchar,
                                                    keylen: usize,
                                                    salt:
                                                        *const ::std::os::raw::c_uchar,
                                                    personal:
                                                        *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_generichash_blake2b_init(state:
                                               *mut crypto_generichash_blake2b_state,
                                           key:
                                               *const ::std::os::raw::c_uchar,
                                           keylen: usize, outlen: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_generichash_blake2b_init_salt_personal(state:
                                                             *mut crypto_generichash_blake2b_state,
                                                         key:
                                                             *const ::std::os::raw::c_uchar,
                                                         keylen: usize,
                                                         outlen: usize,
                                                         salt:
                                                             *const ::std::os::raw::c_uchar,
                                                         personal:
                                                             *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_generichash_blake2b_update(state:
                                                 *mut crypto_generichash_blake2b_state,
                                             in_:
                                                 *const ::std::os::raw::c_uchar,
                                             inlen:
                                                 ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_generichash_blake2b_final(state:
                                                *mut crypto_generichash_blake2b_state,
                                            out: *mut ::std::os::raw::c_uchar,
                                            outlen: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_generichash_blake2b_keygen(k: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn _crypto_generichash_blake2b_pick_best_implementation()
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_generichash_bytes_min() -> usize;
}
extern "C" {
    pub fn crypto_generichash_bytes_max() -> usize;
}
extern "C" {
    pub fn crypto_generichash_bytes() -> usize;
}
extern "C" {
    pub fn crypto_generichash_keybytes_min() -> usize;
}
extern "C" {
    pub fn crypto_generichash_keybytes_max() -> usize;
}
extern "C" {
    pub fn crypto_generichash_keybytes() -> usize;
}
extern "C" {
    pub fn crypto_generichash_primitive() -> *const ::std::os::raw::c_char;
}
pub type crypto_generichash_state = crypto_generichash_blake2b_state;
extern "C" {
    pub fn crypto_generichash_statebytes() -> usize;
}
extern "C" {
    pub fn crypto_generichash(out: *mut ::std::os::raw::c_uchar,
                              outlen: usize,
                              in_: *const ::std::os::raw::c_uchar,
                              inlen: ::std::os::raw::c_ulonglong,
                              key: *const ::std::os::raw::c_uchar,
                              keylen: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_generichash_init(state: *mut crypto_generichash_state,
                                   key: *const ::std::os::raw::c_uchar,
                                   keylen: usize, outlen: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_generichash_update(state: *mut crypto_generichash_state,
                                     in_: *const ::std::os::raw::c_uchar,
                                     inlen: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_generichash_final(state: *mut crypto_generichash_state,
                                    out: *mut ::std::os::raw::c_uchar,
                                    outlen: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_generichash_keygen(k: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn crypto_hash_bytes() -> usize;
}
extern "C" {
    pub fn crypto_hash(out: *mut ::std::os::raw::c_uchar,
                       in_: *const ::std::os::raw::c_uchar,
                       inlen: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_hash_primitive() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn crypto_kdf_blake2b_bytes_min() -> usize;
}
extern "C" {
    pub fn crypto_kdf_blake2b_bytes_max() -> usize;
}
extern "C" {
    pub fn crypto_kdf_blake2b_contextbytes() -> usize;
}
extern "C" {
    pub fn crypto_kdf_blake2b_keybytes() -> usize;
}
extern "C" {
    pub fn crypto_kdf_blake2b_derive_from_key(subkey:
                                                  *mut ::std::os::raw::c_uchar,
                                              subkey_len: usize,
                                              subkey_id: u64,
                                              ctx:
                                                  *const ::std::os::raw::c_char,
                                              key:
                                                  *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_kdf_bytes_min() -> usize;
}
extern "C" {
    pub fn crypto_kdf_bytes_max() -> usize;
}
extern "C" {
    pub fn crypto_kdf_contextbytes() -> usize;
}
extern "C" {
    pub fn crypto_kdf_keybytes() -> usize;
}
extern "C" {
    pub fn crypto_kdf_primitive() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn crypto_kdf_derive_from_key(subkey: *mut ::std::os::raw::c_uchar,
                                      subkey_len: usize, subkey_id: u64,
                                      ctx: *const ::std::os::raw::c_char,
                                      key: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_kdf_keygen(k: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn crypto_kx_publickeybytes() -> usize;
}
extern "C" {
    pub fn crypto_kx_secretkeybytes() -> usize;
}
extern "C" {
    pub fn crypto_kx_seedbytes() -> usize;
}
extern "C" {
    pub fn crypto_kx_sessionkeybytes() -> usize;
}
extern "C" {
    pub fn crypto_kx_primitive() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn crypto_kx_seed_keypair(pk: *mut ::std::os::raw::c_uchar,
                                  sk: *mut ::std::os::raw::c_uchar,
                                  seed: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_kx_keypair(pk: *mut ::std::os::raw::c_uchar,
                             sk: *mut ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_kx_client_session_keys(rx: *mut ::std::os::raw::c_uchar,
                                         tx: *mut ::std::os::raw::c_uchar,
                                         client_pk:
                                             *const ::std::os::raw::c_uchar,
                                         client_sk:
                                             *const ::std::os::raw::c_uchar,
                                         server_pk:
                                             *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_kx_server_session_keys(rx: *mut ::std::os::raw::c_uchar,
                                         tx: *mut ::std::os::raw::c_uchar,
                                         server_pk:
                                             *const ::std::os::raw::c_uchar,
                                         server_sk:
                                             *const ::std::os::raw::c_uchar,
                                         client_pk:
                                             *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
pub type va_list = __darwin_va_list;
extern "C" {
    pub fn renameat(arg1: ::std::os::raw::c_int,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: ::std::os::raw::c_int,
                    arg4: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renamex_np(arg1: *const ::std::os::raw::c_char,
                      arg2: *const ::std::os::raw::c_char,
                      arg3: ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameatx_np(arg1: ::std::os::raw::c_int,
                        arg2: *const ::std::os::raw::c_char,
                        arg3: ::std::os::raw::c_int,
                        arg4: *const ::std::os::raw::c_char,
                        arg5: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    assert_eq!(::std::mem::size_of::<__sbuf>() , 16usize , concat ! (
               "Size of: " , stringify ! ( __sbuf ) ));
    assert_eq! (::std::mem::align_of::<__sbuf>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __sbuf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sbuf ) ) . _base as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __sbuf ) , "::" ,
                stringify ! ( _base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sbuf ) ) . _size as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __sbuf ) , "::" ,
                stringify ! ( _size ) ));
}
impl Clone for __sbuf {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX([u8; 0]);
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                               *mut ::std::os::raw::c_void)
                                          -> ::std::os::raw::c_int>,
    pub _read: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *mut ::std::os::raw::c_void,
                                                          arg2:
                                                              *mut ::std::os::raw::c_char,
                                                          arg3:
                                                              ::std::os::raw::c_int)
                                         -> ::std::os::raw::c_int>,
    pub _seek: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                              *mut ::std::os::raw::c_void,
                                                          arg2: fpos_t,
                                                          arg3:
                                                              ::std::os::raw::c_int)
                                         -> fpos_t>,
    pub _write: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                               *mut ::std::os::raw::c_void,
                                                           arg2:
                                                               *const ::std::os::raw::c_char,
                                                           arg3:
                                                               ::std::os::raw::c_int)
                                          -> ::std::os::raw::c_int>,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[test]
fn bindgen_test_layout___sFILE() {
    assert_eq!(::std::mem::size_of::<__sFILE>() , 152usize , concat ! (
               "Size of: " , stringify ! ( __sFILE ) ));
    assert_eq! (::std::mem::align_of::<__sFILE>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __sFILE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _p as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _p ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _r as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _r ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _w as * const _ as usize }
                , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _w ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _flags as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _file as * const _ as usize
                } , 18usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _file ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _bf as * const _ as usize }
                , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _bf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _lbfsize as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _lbfsize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _cookie as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _cookie ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _close as * const _ as
                usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _close ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _read as * const _ as usize
                } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _read ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _seek as * const _ as usize
                } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _seek ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _write as * const _ as
                usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _write ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _ub as * const _ as usize }
                , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _ub ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _extra as * const _ as
                usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _extra ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _ur as * const _ as usize }
                , 112usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _ur ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _ubuf as * const _ as usize
                } , 116usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _ubuf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _nbuf as * const _ as usize
                } , 119usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _nbuf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _lb as * const _ as usize }
                , 120usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _lb ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _blksize as * const _ as
                usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _blksize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sFILE ) ) . _offset as * const _ as
                usize } , 144usize , concat ! (
                "Alignment of field: " , stringify ! ( __sFILE ) , "::" ,
                stringify ! ( _offset ) ));
}
impl Clone for __sFILE {
    fn clone(&self) -> Self { *self }
}
pub type FILE = __sFILE;
extern "C" {
    #[link_name = "__stdinp"]
    pub static mut __stdinp: *mut FILE;
}
extern "C" {
    #[link_name = "__stdoutp"]
    pub static mut __stdoutp: *mut FILE;
}
extern "C" {
    #[link_name = "__stderrp"]
    pub static mut __stderrp: *mut FILE;
}
extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(arg1: *mut ::std::os::raw::c_char,
                 arg2: ::std::os::raw::c_int, arg3: *mut FILE)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fopen(__filename: *const ::std::os::raw::c_char,
                 __mode: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fprintf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(__ptr: *mut ::std::os::raw::c_void, __size: usize,
                 __nitems: usize, __stream: *mut FILE) -> usize;
}
extern "C" {
    pub fn freopen(arg1: *const ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char, arg3: *mut FILE)
     -> *mut FILE;
}
extern "C" {
    pub fn fscanf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(arg1: *mut FILE, arg2: ::std::os::raw::c_long,
                 arg3: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fwrite(__ptr: *const ::std::os::raw::c_void, __size: usize,
                  __nitems: usize, __stream: *mut FILE) -> usize;
}
extern "C" {
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gets(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(arg1: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(__old: *const ::std::os::raw::c_char,
                  __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char,
                   arg3: ::std::os::raw::c_int, arg4: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(arg1: *mut ::std::os::raw::c_char,
                   arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(arg1: *const ::std::os::raw::c_char,
                  arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char,
                    arg3: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(arg1: *const ::std::os::raw::c_char,
                   arg2: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(arg1: *mut ::std::os::raw::c_char,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fdopen(arg1: ::std::os::raw::c_int,
                  arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(arg1: *const ::std::os::raw::c_char,
                 arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __svfscanf(arg1: *mut FILE, arg2: *const ::std::os::raw::c_char,
                      arg3: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(__dir: *const ::std::os::raw::c_char,
                   __prefix: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
pub type off_t = __darwin_off_t;
extern "C" {
    pub fn fseeko(__stream: *mut FILE, __offset: off_t,
                  __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> off_t;
}
extern "C" {
    pub fn snprintf(__str: *mut ::std::os::raw::c_char, __size: usize,
                    __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char,
                   arg1: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(__format: *const ::std::os::raw::c_char,
                  arg1: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(__str: *mut ::std::os::raw::c_char, __size: usize,
                     __format: *const ::std::os::raw::c_char,
                     arg1: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(__str: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char,
                   arg1: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(arg1: ::std::os::raw::c_int,
                   arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(arg1: ::std::os::raw::c_int,
                    arg2: *const ::std::os::raw::c_char,
                    arg3: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdelim(__linep: *mut *mut ::std::os::raw::c_char,
                    __linecapp: *mut usize,
                    __delimiter: ::std::os::raw::c_int, __stream: *mut FILE)
     -> isize;
}
extern "C" {
    pub fn getline(__linep: *mut *mut ::std::os::raw::c_char,
                   __linecapp: *mut usize, __stream: *mut FILE) -> isize;
}
extern "C" {
    #[link_name = "sys_nerr"]
    pub static sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "sys_errlist"]
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn asprintf(arg1: *mut *mut ::std::os::raw::c_char,
                    arg2: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgetln(arg1: *mut FILE, arg2: *mut usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fmtcheck(arg1: *const ::std::os::raw::c_char,
                    arg2: *const ::std::os::raw::c_char)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char,
                     arg3: ::std::os::raw::c_int);
}
extern "C" {
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(arg1: *mut *mut ::std::os::raw::c_char,
                     arg2: *const ::std::os::raw::c_char,
                     arg3: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn zopen(arg1: *const ::std::os::raw::c_char,
                 arg2: *const ::std::os::raw::c_char,
                 arg3: ::std::os::raw::c_int) -> *mut FILE;
}
extern "C" {
    pub fn funopen(arg1: *const ::std::os::raw::c_void,
                   arg2:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *mut ::std::os::raw::c_char,
                                                                  arg3:
                                                                      ::std::os::raw::c_int)
                                                 -> ::std::os::raw::c_int>,
                   arg3:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *const ::std::os::raw::c_char,
                                                                  arg3:
                                                                      ::std::os::raw::c_int)
                                                 -> ::std::os::raw::c_int>,
                   arg4:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void,
                                                                  arg2:
                                                                      fpos_t,
                                                                  arg3:
                                                                      ::std::os::raw::c_int)
                                                 -> fpos_t>,
                   arg5:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void)
                                                 -> ::std::os::raw::c_int>)
     -> *mut FILE;
}
extern "C" {
    pub fn __sprintf_chk(arg1: *mut ::std::os::raw::c_char,
                         arg2: ::std::os::raw::c_int, arg3: usize,
                         arg4: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __snprintf_chk(arg1: *mut ::std::os::raw::c_char, arg2: usize,
                          arg3: ::std::os::raw::c_int, arg4: usize,
                          arg5: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsprintf_chk(arg1: *mut ::std::os::raw::c_char,
                          arg2: ::std::os::raw::c_int, arg3: usize,
                          arg4: *const ::std::os::raw::c_char,
                          arg5: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __vsnprintf_chk(arg1: *mut ::std::os::raw::c_char, arg2: usize,
                           arg3: ::std::os::raw::c_int, arg4: usize,
                           arg5: *const ::std::os::raw::c_char,
                           arg6: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_quad_t = u_int64_t;
pub type quad_t = i64;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut ::std::os::raw::c_char;
pub type daddr_t = i32;
pub type fixpt_t = u_int32_t;
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type gid_t = __darwin_gid_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type ino_t = __darwin_ino_t;
pub type ino64_t = __darwin_ino64_t;
pub type key_t = __int32_t;
pub type nlink_t = __uint16_t;
pub type segsz_t = i32;
pub type swblk_t = i32;
pub type clock_t = __darwin_clock_t;
pub type time_t = __darwin_time_t;
pub type useconds_t = __darwin_useconds_t;
pub type suseconds_t = __darwin_suseconds_t;
pub type rsize_t = __darwin_size_t;
pub type errno_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct fd_set {
    pub fds_bits: [__int32_t; 32usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(::std::mem::size_of::<fd_set>() , 128usize , concat ! (
               "Size of: " , stringify ! ( fd_set ) ));
    assert_eq! (::std::mem::align_of::<fd_set>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( fd_set ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const fd_set ) ) . fds_bits as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( fd_set ) , "::" ,
                stringify ! ( fds_bits ) ));
}
impl Clone for fd_set {
    fn clone(&self) -> Self { *self }
}
pub type fd_mask = __int32_t;
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_condattr_t = __darwin_pthread_condattr_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub type pthread_once_t = __darwin_pthread_once_t;
pub type pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub type pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub type pthread_t = __darwin_pthread_t;
pub type pthread_key_t = __darwin_pthread_key_t;
pub type fsblkcnt_t = __darwin_fsblkcnt_t;
pub type fsfilcnt_t = __darwin_fsfilcnt_t;
#[repr(C)]
pub struct crypto_onetimeauth_poly1305_state {
    pub opaque: [::std::os::raw::c_uchar; 256usize],
}
#[test]
fn bindgen_test_layout_crypto_onetimeauth_poly1305_state() {
    assert_eq!(::std::mem::size_of::<crypto_onetimeauth_poly1305_state>() ,
               256usize , concat ! (
               "Size of: " , stringify ! ( crypto_onetimeauth_poly1305_state )
               ));
    assert_eq! (::std::mem::align_of::<crypto_onetimeauth_poly1305_state>() ,
                1usize , concat ! (
                "Alignment of " , stringify ! (
                crypto_onetimeauth_poly1305_state ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const crypto_onetimeauth_poly1305_state ) ) .
                opaque as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                crypto_onetimeauth_poly1305_state ) , "::" , stringify ! (
                opaque ) ));
}
extern "C" {
    pub fn crypto_onetimeauth_poly1305_statebytes() -> usize;
}
extern "C" {
    pub fn crypto_onetimeauth_poly1305_bytes() -> usize;
}
extern "C" {
    pub fn crypto_onetimeauth_poly1305_keybytes() -> usize;
}
extern "C" {
    pub fn crypto_onetimeauth_poly1305(out: *mut ::std::os::raw::c_uchar,
                                       in_: *const ::std::os::raw::c_uchar,
                                       inlen: ::std::os::raw::c_ulonglong,
                                       k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_onetimeauth_poly1305_verify(h:
                                                  *const ::std::os::raw::c_uchar,
                                              in_:
                                                  *const ::std::os::raw::c_uchar,
                                              inlen:
                                                  ::std::os::raw::c_ulonglong,
                                              k:
                                                  *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_onetimeauth_poly1305_init(state:
                                                *mut crypto_onetimeauth_poly1305_state,
                                            key:
                                                *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_onetimeauth_poly1305_update(state:
                                                  *mut crypto_onetimeauth_poly1305_state,
                                              in_:
                                                  *const ::std::os::raw::c_uchar,
                                              inlen:
                                                  ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_onetimeauth_poly1305_final(state:
                                                 *mut crypto_onetimeauth_poly1305_state,
                                             out:
                                                 *mut ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_onetimeauth_poly1305_keygen(k:
                                                  *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn _crypto_onetimeauth_poly1305_pick_best_implementation()
     -> ::std::os::raw::c_int;
}
pub type crypto_onetimeauth_state = crypto_onetimeauth_poly1305_state;
extern "C" {
    pub fn crypto_onetimeauth_statebytes() -> usize;
}
extern "C" {
    pub fn crypto_onetimeauth_bytes() -> usize;
}
extern "C" {
    pub fn crypto_onetimeauth_keybytes() -> usize;
}
extern "C" {
    pub fn crypto_onetimeauth_primitive() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn crypto_onetimeauth(out: *mut ::std::os::raw::c_uchar,
                              in_: *const ::std::os::raw::c_uchar,
                              inlen: ::std::os::raw::c_ulonglong,
                              k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_onetimeauth_verify(h: *const ::std::os::raw::c_uchar,
                                     in_: *const ::std::os::raw::c_uchar,
                                     inlen: ::std::os::raw::c_ulonglong,
                                     k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_onetimeauth_init(state: *mut crypto_onetimeauth_state,
                                   key: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_onetimeauth_update(state: *mut crypto_onetimeauth_state,
                                     in_: *const ::std::os::raw::c_uchar,
                                     inlen: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_onetimeauth_final(state: *mut crypto_onetimeauth_state,
                                    out: *mut ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_onetimeauth_keygen(k: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn crypto_pwhash_argon2i_alg_argon2i13() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_pwhash_argon2i_bytes_min() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_argon2i_bytes_max() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_argon2i_passwd_min() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_argon2i_passwd_max() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_argon2i_saltbytes() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_argon2i_strbytes() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_argon2i_strprefix() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn crypto_pwhash_argon2i_opslimit_min() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_argon2i_opslimit_max() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_argon2i_memlimit_min() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_argon2i_memlimit_max() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_argon2i_opslimit_interactive() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_argon2i_memlimit_interactive() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_argon2i_opslimit_moderate() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_argon2i_memlimit_moderate() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_argon2i_opslimit_sensitive() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_argon2i_memlimit_sensitive() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_argon2i(out: *const ::std::os::raw::c_uchar,
                                 outlen: ::std::os::raw::c_ulonglong,
                                 passwd: *const ::std::os::raw::c_char,
                                 passwdlen: ::std::os::raw::c_ulonglong,
                                 salt: *const ::std::os::raw::c_uchar,
                                 opslimit: ::std::os::raw::c_ulonglong,
                                 memlimit: usize, alg: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_pwhash_argon2i_str(out: *mut ::std::os::raw::c_char,
                                     passwd: *const ::std::os::raw::c_char,
                                     passwdlen: ::std::os::raw::c_ulonglong,
                                     opslimit: ::std::os::raw::c_ulonglong,
                                     memlimit: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_pwhash_argon2i_str_verify(str:
                                                *const ::std::os::raw::c_char,
                                            passwd:
                                                *const ::std::os::raw::c_char,
                                            passwdlen:
                                                ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _crypto_pwhash_argon2i_pick_best_implementation()
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_pwhash_alg_argon2i13() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_pwhash_alg_default() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_pwhash_bytes_min() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_bytes_max() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_passwd_min() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_passwd_max() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_saltbytes() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_strbytes() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_strprefix() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn crypto_pwhash_opslimit_min() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_opslimit_max() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_memlimit_min() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_memlimit_max() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_opslimit_interactive() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_memlimit_interactive() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_opslimit_moderate() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_memlimit_moderate() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_opslimit_sensitive() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_memlimit_sensitive() -> usize;
}
extern "C" {
    pub fn crypto_pwhash(out: *const ::std::os::raw::c_uchar,
                         outlen: ::std::os::raw::c_ulonglong,
                         passwd: *const ::std::os::raw::c_char,
                         passwdlen: ::std::os::raw::c_ulonglong,
                         salt: *const ::std::os::raw::c_uchar,
                         opslimit: ::std::os::raw::c_ulonglong,
                         memlimit: usize, alg: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_pwhash_str(out: *mut ::std::os::raw::c_char,
                             passwd: *const ::std::os::raw::c_char,
                             passwdlen: ::std::os::raw::c_ulonglong,
                             opslimit: ::std::os::raw::c_ulonglong,
                             memlimit: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_pwhash_str_verify(str: *const ::std::os::raw::c_char,
                                    passwd: *const ::std::os::raw::c_char,
                                    passwdlen: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_pwhash_primitive() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn crypto_pwhash_scryptsalsa208sha256_bytes_min() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_scryptsalsa208sha256_bytes_max() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_scryptsalsa208sha256_passwd_min() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_scryptsalsa208sha256_passwd_max() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_scryptsalsa208sha256_saltbytes() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_scryptsalsa208sha256_strbytes() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_scryptsalsa208sha256_strprefix()
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn crypto_pwhash_scryptsalsa208sha256_opslimit_min() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_scryptsalsa208sha256_opslimit_max() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_scryptsalsa208sha256_memlimit_min() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_scryptsalsa208sha256_memlimit_max() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_scryptsalsa208sha256_opslimit_interactive() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_scryptsalsa208sha256_memlimit_interactive() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_scryptsalsa208sha256_opslimit_sensitive() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_scryptsalsa208sha256_memlimit_sensitive() -> usize;
}
extern "C" {
    pub fn crypto_pwhash_scryptsalsa208sha256(out:
                                                  *const ::std::os::raw::c_uchar,
                                              outlen:
                                                  ::std::os::raw::c_ulonglong,
                                              passwd:
                                                  *const ::std::os::raw::c_char,
                                              passwdlen:
                                                  ::std::os::raw::c_ulonglong,
                                              salt:
                                                  *const ::std::os::raw::c_uchar,
                                              opslimit:
                                                  ::std::os::raw::c_ulonglong,
                                              memlimit: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_pwhash_scryptsalsa208sha256_str(out:
                                                      *mut ::std::os::raw::c_char,
                                                  passwd:
                                                      *const ::std::os::raw::c_char,
                                                  passwdlen:
                                                      ::std::os::raw::c_ulonglong,
                                                  opslimit:
                                                      ::std::os::raw::c_ulonglong,
                                                  memlimit: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_pwhash_scryptsalsa208sha256_str_verify(str:
                                                             *const ::std::os::raw::c_char,
                                                         passwd:
                                                             *const ::std::os::raw::c_char,
                                                         passwdlen:
                                                             ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_pwhash_scryptsalsa208sha256_ll(passwd: *const u8,
                                                 passwdlen: usize,
                                                 salt: *const u8,
                                                 saltlen: usize, N: u64,
                                                 r: u32, p: u32, buf: *mut u8,
                                                 buflen: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_scalarmult_curve25519_bytes() -> usize;
}
extern "C" {
    pub fn crypto_scalarmult_curve25519_scalarbytes() -> usize;
}
extern "C" {
    pub fn crypto_scalarmult_curve25519(q: *mut ::std::os::raw::c_uchar,
                                        n: *const ::std::os::raw::c_uchar,
                                        p: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_scalarmult_curve25519_base(q: *mut ::std::os::raw::c_uchar,
                                             n:
                                                 *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _crypto_scalarmult_curve25519_pick_best_implementation()
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_scalarmult_bytes() -> usize;
}
extern "C" {
    pub fn crypto_scalarmult_scalarbytes() -> usize;
}
extern "C" {
    pub fn crypto_scalarmult_primitive() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn crypto_scalarmult_base(q: *mut ::std::os::raw::c_uchar,
                                  n: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_scalarmult(q: *mut ::std::os::raw::c_uchar,
                             n: *const ::std::os::raw::c_uchar,
                             p: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_secretbox_xsalsa20poly1305_keybytes() -> usize;
}
extern "C" {
    pub fn crypto_secretbox_xsalsa20poly1305_noncebytes() -> usize;
}
extern "C" {
    pub fn crypto_secretbox_xsalsa20poly1305_macbytes() -> usize;
}
extern "C" {
    pub fn crypto_secretbox_xsalsa20poly1305_boxzerobytes() -> usize;
}
extern "C" {
    pub fn crypto_secretbox_xsalsa20poly1305_zerobytes() -> usize;
}
extern "C" {
    pub fn crypto_secretbox_xsalsa20poly1305(c: *mut ::std::os::raw::c_uchar,
                                             m:
                                                 *const ::std::os::raw::c_uchar,
                                             mlen:
                                                 ::std::os::raw::c_ulonglong,
                                             n:
                                                 *const ::std::os::raw::c_uchar,
                                             k:
                                                 *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_secretbox_xsalsa20poly1305_open(m:
                                                      *mut ::std::os::raw::c_uchar,
                                                  c:
                                                      *const ::std::os::raw::c_uchar,
                                                  clen:
                                                      ::std::os::raw::c_ulonglong,
                                                  n:
                                                      *const ::std::os::raw::c_uchar,
                                                  k:
                                                      *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_secretbox_xsalsa20poly1305_keygen(k:
                                                        *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn crypto_secretbox_keybytes() -> usize;
}
extern "C" {
    pub fn crypto_secretbox_noncebytes() -> usize;
}
extern "C" {
    pub fn crypto_secretbox_macbytes() -> usize;
}
extern "C" {
    pub fn crypto_secretbox_primitive() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn crypto_secretbox_easy(c: *mut ::std::os::raw::c_uchar,
                                 m: *const ::std::os::raw::c_uchar,
                                 mlen: ::std::os::raw::c_ulonglong,
                                 n: *const ::std::os::raw::c_uchar,
                                 k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_secretbox_open_easy(m: *mut ::std::os::raw::c_uchar,
                                      c: *const ::std::os::raw::c_uchar,
                                      clen: ::std::os::raw::c_ulonglong,
                                      n: *const ::std::os::raw::c_uchar,
                                      k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_secretbox_detached(c: *mut ::std::os::raw::c_uchar,
                                     mac: *mut ::std::os::raw::c_uchar,
                                     m: *const ::std::os::raw::c_uchar,
                                     mlen: ::std::os::raw::c_ulonglong,
                                     n: *const ::std::os::raw::c_uchar,
                                     k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_secretbox_open_detached(m: *mut ::std::os::raw::c_uchar,
                                          c: *const ::std::os::raw::c_uchar,
                                          mac: *const ::std::os::raw::c_uchar,
                                          clen: ::std::os::raw::c_ulonglong,
                                          n: *const ::std::os::raw::c_uchar,
                                          k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_secretbox_keygen(k: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn crypto_secretbox_zerobytes() -> usize;
}
extern "C" {
    pub fn crypto_secretbox_boxzerobytes() -> usize;
}
extern "C" {
    pub fn crypto_secretbox(c: *mut ::std::os::raw::c_uchar,
                            m: *const ::std::os::raw::c_uchar,
                            mlen: ::std::os::raw::c_ulonglong,
                            n: *const ::std::os::raw::c_uchar,
                            k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_secretbox_open(m: *mut ::std::os::raw::c_uchar,
                                 c: *const ::std::os::raw::c_uchar,
                                 clen: ::std::os::raw::c_ulonglong,
                                 n: *const ::std::os::raw::c_uchar,
                                 k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_shorthash_siphash24_bytes() -> usize;
}
extern "C" {
    pub fn crypto_shorthash_siphash24_keybytes() -> usize;
}
extern "C" {
    pub fn crypto_shorthash_siphash24(out: *mut ::std::os::raw::c_uchar,
                                      in_: *const ::std::os::raw::c_uchar,
                                      inlen: ::std::os::raw::c_ulonglong,
                                      k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_shorthash_siphashx24_bytes() -> usize;
}
extern "C" {
    pub fn crypto_shorthash_siphashx24_keybytes() -> usize;
}
extern "C" {
    pub fn crypto_shorthash_siphashx24(out: *mut ::std::os::raw::c_uchar,
                                       in_: *const ::std::os::raw::c_uchar,
                                       inlen: ::std::os::raw::c_ulonglong,
                                       k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_shorthash_bytes() -> usize;
}
extern "C" {
    pub fn crypto_shorthash_keybytes() -> usize;
}
extern "C" {
    pub fn crypto_shorthash_primitive() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn crypto_shorthash(out: *mut ::std::os::raw::c_uchar,
                            in_: *const ::std::os::raw::c_uchar,
                            inlen: ::std::os::raw::c_ulonglong,
                            k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_shorthash_keygen(k: *mut ::std::os::raw::c_uchar);
}
#[repr(C)]
pub struct crypto_sign_ed25519ph_state {
    pub hs: crypto_hash_sha512_state,
}
#[test]
fn bindgen_test_layout_crypto_sign_ed25519ph_state() {
    assert_eq!(::std::mem::size_of::<crypto_sign_ed25519ph_state>() , 208usize
               , concat ! (
               "Size of: " , stringify ! ( crypto_sign_ed25519ph_state ) ));
    assert_eq! (::std::mem::align_of::<crypto_sign_ed25519ph_state>() , 8usize
                , concat ! (
                "Alignment of " , stringify ! ( crypto_sign_ed25519ph_state )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const crypto_sign_ed25519ph_state ) ) . hs as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                crypto_sign_ed25519ph_state ) , "::" , stringify ! ( hs ) ));
}
extern "C" {
    pub fn crypto_sign_ed25519ph_statebytes() -> usize;
}
extern "C" {
    pub fn crypto_sign_ed25519_bytes() -> usize;
}
extern "C" {
    pub fn crypto_sign_ed25519_seedbytes() -> usize;
}
extern "C" {
    pub fn crypto_sign_ed25519_publickeybytes() -> usize;
}
extern "C" {
    pub fn crypto_sign_ed25519_secretkeybytes() -> usize;
}
extern "C" {
    pub fn crypto_sign_ed25519(sm: *mut ::std::os::raw::c_uchar,
                               smlen_p: *mut ::std::os::raw::c_ulonglong,
                               m: *const ::std::os::raw::c_uchar,
                               mlen: ::std::os::raw::c_ulonglong,
                               sk: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_sign_ed25519_open(m: *mut ::std::os::raw::c_uchar,
                                    mlen_p: *mut ::std::os::raw::c_ulonglong,
                                    sm: *const ::std::os::raw::c_uchar,
                                    smlen: ::std::os::raw::c_ulonglong,
                                    pk: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_sign_ed25519_detached(sig: *mut ::std::os::raw::c_uchar,
                                        siglen_p:
                                            *mut ::std::os::raw::c_ulonglong,
                                        m: *const ::std::os::raw::c_uchar,
                                        mlen: ::std::os::raw::c_ulonglong,
                                        sk: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_sign_ed25519_verify_detached(sig:
                                                   *const ::std::os::raw::c_uchar,
                                               m:
                                                   *const ::std::os::raw::c_uchar,
                                               mlen:
                                                   ::std::os::raw::c_ulonglong,
                                               pk:
                                                   *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_sign_ed25519_keypair(pk: *mut ::std::os::raw::c_uchar,
                                       sk: *mut ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_sign_ed25519_seed_keypair(pk: *mut ::std::os::raw::c_uchar,
                                            sk: *mut ::std::os::raw::c_uchar,
                                            seed:
                                                *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_sign_ed25519_pk_to_curve25519(curve25519_pk:
                                                    *mut ::std::os::raw::c_uchar,
                                                ed25519_pk:
                                                    *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_sign_ed25519_sk_to_curve25519(curve25519_sk:
                                                    *mut ::std::os::raw::c_uchar,
                                                ed25519_sk:
                                                    *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_sign_ed25519_sk_to_seed(seed: *mut ::std::os::raw::c_uchar,
                                          sk: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_sign_ed25519_sk_to_pk(pk: *mut ::std::os::raw::c_uchar,
                                        sk: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_sign_ed25519ph_init(state: *mut crypto_sign_ed25519ph_state)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_sign_ed25519ph_update(state:
                                            *mut crypto_sign_ed25519ph_state,
                                        m: *const ::std::os::raw::c_uchar,
                                        mlen: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_sign_ed25519ph_final_create(state:
                                                  *mut crypto_sign_ed25519ph_state,
                                              sig:
                                                  *mut ::std::os::raw::c_uchar,
                                              siglen_p:
                                                  *mut ::std::os::raw::c_ulonglong,
                                              sk:
                                                  *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_sign_ed25519ph_final_verify(state:
                                                  *mut crypto_sign_ed25519ph_state,
                                              sig:
                                                  *mut ::std::os::raw::c_uchar,
                                              pk:
                                                  *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
pub type crypto_sign_state = crypto_sign_ed25519ph_state;
extern "C" {
    pub fn crypto_sign_statebytes() -> usize;
}
extern "C" {
    pub fn crypto_sign_bytes() -> usize;
}
extern "C" {
    pub fn crypto_sign_seedbytes() -> usize;
}
extern "C" {
    pub fn crypto_sign_publickeybytes() -> usize;
}
extern "C" {
    pub fn crypto_sign_secretkeybytes() -> usize;
}
extern "C" {
    pub fn crypto_sign_primitive() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn crypto_sign_seed_keypair(pk: *mut ::std::os::raw::c_uchar,
                                    sk: *mut ::std::os::raw::c_uchar,
                                    seed: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_sign_keypair(pk: *mut ::std::os::raw::c_uchar,
                               sk: *mut ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_sign(sm: *mut ::std::os::raw::c_uchar,
                       smlen_p: *mut ::std::os::raw::c_ulonglong,
                       m: *const ::std::os::raw::c_uchar,
                       mlen: ::std::os::raw::c_ulonglong,
                       sk: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_sign_open(m: *mut ::std::os::raw::c_uchar,
                            mlen_p: *mut ::std::os::raw::c_ulonglong,
                            sm: *const ::std::os::raw::c_uchar,
                            smlen: ::std::os::raw::c_ulonglong,
                            pk: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_sign_detached(sig: *mut ::std::os::raw::c_uchar,
                                siglen_p: *mut ::std::os::raw::c_ulonglong,
                                m: *const ::std::os::raw::c_uchar,
                                mlen: ::std::os::raw::c_ulonglong,
                                sk: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_sign_verify_detached(sig: *const ::std::os::raw::c_uchar,
                                       m: *const ::std::os::raw::c_uchar,
                                       mlen: ::std::os::raw::c_ulonglong,
                                       pk: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_sign_init(state: *mut crypto_sign_state)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_sign_update(state: *mut crypto_sign_state,
                              m: *const ::std::os::raw::c_uchar,
                              mlen: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_sign_final_create(state: *mut crypto_sign_state,
                                    sig: *mut ::std::os::raw::c_uchar,
                                    siglen_p:
                                        *mut ::std::os::raw::c_ulonglong,
                                    sk: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_sign_final_verify(state: *mut crypto_sign_state,
                                    sig: *mut ::std::os::raw::c_uchar,
                                    pk: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_stream_xsalsa20_keybytes() -> usize;
}
extern "C" {
    pub fn crypto_stream_xsalsa20_noncebytes() -> usize;
}
extern "C" {
    pub fn crypto_stream_xsalsa20(c: *mut ::std::os::raw::c_uchar,
                                  clen: ::std::os::raw::c_ulonglong,
                                  n: *const ::std::os::raw::c_uchar,
                                  k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_stream_xsalsa20_xor(c: *mut ::std::os::raw::c_uchar,
                                      m: *const ::std::os::raw::c_uchar,
                                      mlen: ::std::os::raw::c_ulonglong,
                                      n: *const ::std::os::raw::c_uchar,
                                      k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_stream_xsalsa20_xor_ic(c: *mut ::std::os::raw::c_uchar,
                                         m: *const ::std::os::raw::c_uchar,
                                         mlen: ::std::os::raw::c_ulonglong,
                                         n: *const ::std::os::raw::c_uchar,
                                         ic: u64,
                                         k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_stream_xsalsa20_keygen(k: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn crypto_stream_keybytes() -> usize;
}
extern "C" {
    pub fn crypto_stream_noncebytes() -> usize;
}
extern "C" {
    pub fn crypto_stream_primitive() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn crypto_stream(c: *mut ::std::os::raw::c_uchar,
                         clen: ::std::os::raw::c_ulonglong,
                         n: *const ::std::os::raw::c_uchar,
                         k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_stream_xor(c: *mut ::std::os::raw::c_uchar,
                             m: *const ::std::os::raw::c_uchar,
                             mlen: ::std::os::raw::c_ulonglong,
                             n: *const ::std::os::raw::c_uchar,
                             k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_stream_keygen(k: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn crypto_stream_chacha20_keybytes() -> usize;
}
extern "C" {
    pub fn crypto_stream_chacha20_noncebytes() -> usize;
}
extern "C" {
    pub fn crypto_stream_chacha20(c: *mut ::std::os::raw::c_uchar,
                                  clen: ::std::os::raw::c_ulonglong,
                                  n: *const ::std::os::raw::c_uchar,
                                  k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_stream_chacha20_xor(c: *mut ::std::os::raw::c_uchar,
                                      m: *const ::std::os::raw::c_uchar,
                                      mlen: ::std::os::raw::c_ulonglong,
                                      n: *const ::std::os::raw::c_uchar,
                                      k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_stream_chacha20_xor_ic(c: *mut ::std::os::raw::c_uchar,
                                         m: *const ::std::os::raw::c_uchar,
                                         mlen: ::std::os::raw::c_ulonglong,
                                         n: *const ::std::os::raw::c_uchar,
                                         ic: u64,
                                         k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_stream_chacha20_keygen(k: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn crypto_stream_chacha20_ietf_keybytes() -> usize;
}
extern "C" {
    pub fn crypto_stream_chacha20_ietf_noncebytes() -> usize;
}
extern "C" {
    pub fn crypto_stream_chacha20_ietf(c: *mut ::std::os::raw::c_uchar,
                                       clen: ::std::os::raw::c_ulonglong,
                                       n: *const ::std::os::raw::c_uchar,
                                       k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_stream_chacha20_ietf_xor(c: *mut ::std::os::raw::c_uchar,
                                           m: *const ::std::os::raw::c_uchar,
                                           mlen: ::std::os::raw::c_ulonglong,
                                           n: *const ::std::os::raw::c_uchar,
                                           k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_stream_chacha20_ietf_xor_ic(c: *mut ::std::os::raw::c_uchar,
                                              m:
                                                  *const ::std::os::raw::c_uchar,
                                              mlen:
                                                  ::std::os::raw::c_ulonglong,
                                              n:
                                                  *const ::std::os::raw::c_uchar,
                                              ic: u32,
                                              k:
                                                  *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_stream_chacha20_ietf_keygen(k:
                                                  *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn _crypto_stream_chacha20_pick_best_implementation()
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_stream_salsa20_keybytes() -> usize;
}
extern "C" {
    pub fn crypto_stream_salsa20_noncebytes() -> usize;
}
extern "C" {
    pub fn crypto_stream_salsa20(c: *mut ::std::os::raw::c_uchar,
                                 clen: ::std::os::raw::c_ulonglong,
                                 n: *const ::std::os::raw::c_uchar,
                                 k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_stream_salsa20_xor(c: *mut ::std::os::raw::c_uchar,
                                     m: *const ::std::os::raw::c_uchar,
                                     mlen: ::std::os::raw::c_ulonglong,
                                     n: *const ::std::os::raw::c_uchar,
                                     k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_stream_salsa20_xor_ic(c: *mut ::std::os::raw::c_uchar,
                                        m: *const ::std::os::raw::c_uchar,
                                        mlen: ::std::os::raw::c_ulonglong,
                                        n: *const ::std::os::raw::c_uchar,
                                        ic: u64,
                                        k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_stream_salsa20_keygen(k: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn _crypto_stream_salsa20_pick_best_implementation()
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_verify_16_bytes() -> usize;
}
extern "C" {
    pub fn crypto_verify_16(x: *const ::std::os::raw::c_uchar,
                            y: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_verify_32_bytes() -> usize;
}
extern "C" {
    pub fn crypto_verify_32(x: *const ::std::os::raw::c_uchar,
                            y: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_verify_64_bytes() -> usize;
}
extern "C" {
    pub fn crypto_verify_64(x: *const ::std::os::raw::c_uchar,
                            y: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct randombytes_implementation {
    pub implementation_name: ::std::option::Option<unsafe extern "C" fn()
                                                       ->
                                                           *const ::std::os::raw::c_char>,
    pub random: ::std::option::Option<unsafe extern "C" fn() -> u32>,
    pub stir: ::std::option::Option<unsafe extern "C" fn()>,
    pub uniform: ::std::option::Option<unsafe extern "C" fn(upper_bound: u32)
                                           -> u32>,
    pub buf: ::std::option::Option<unsafe extern "C" fn(buf:
                                                            *const ::std::os::raw::c_void,
                                                        size: usize)>,
    pub close: ::std::option::Option<unsafe extern "C" fn()
                                         -> ::std::os::raw::c_int>,
}
#[test]
fn bindgen_test_layout_randombytes_implementation() {
    assert_eq!(::std::mem::size_of::<randombytes_implementation>() , 48usize ,
               concat ! (
               "Size of: " , stringify ! ( randombytes_implementation ) ));
    assert_eq! (::std::mem::align_of::<randombytes_implementation>() , 8usize
                , concat ! (
                "Alignment of " , stringify ! ( randombytes_implementation )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const randombytes_implementation ) ) .
                implementation_name as * const _ as usize } , 0usize , concat
                ! (
                "Alignment of field: " , stringify ! (
                randombytes_implementation ) , "::" , stringify ! (
                implementation_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const randombytes_implementation ) ) . random
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                randombytes_implementation ) , "::" , stringify ! ( random )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const randombytes_implementation ) ) . stir as
                * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                randombytes_implementation ) , "::" , stringify ! ( stir ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const randombytes_implementation ) ) . uniform
                as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                randombytes_implementation ) , "::" , stringify ! ( uniform )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const randombytes_implementation ) ) . buf as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! (
                randombytes_implementation ) , "::" , stringify ! ( buf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const randombytes_implementation ) ) . close as
                * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! (
                randombytes_implementation ) , "::" , stringify ! ( close )
                ));
}
impl Clone for randombytes_implementation {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn randombytes_seedbytes() -> usize;
}
extern "C" {
    pub fn randombytes_buf(buf: *const ::std::os::raw::c_void, size: usize);
}
extern "C" {
    pub fn randombytes_buf_deterministic(buf: *const ::std::os::raw::c_void,
                                         size: usize,
                                         seed:
                                             *const ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn randombytes_random() -> u32;
}
extern "C" {
    pub fn randombytes_uniform(upper_bound: u32) -> u32;
}
extern "C" {
    pub fn randombytes_stir();
}
extern "C" {
    pub fn randombytes_close() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn randombytes_set_implementation(impl_:
                                              *mut randombytes_implementation)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn randombytes_implementation_name() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn randombytes(buf: *const ::std::os::raw::c_uchar,
                       buf_len: ::std::os::raw::c_ulonglong);
}
extern "C" {
    #[link_name = "randombytes_salsa20_implementation"]
    pub static mut randombytes_salsa20_implementation:
               randombytes_implementation;
}
extern "C" {
    #[link_name = "randombytes_sysrandom_implementation"]
    pub static mut randombytes_sysrandom_implementation:
               randombytes_implementation;
}
extern "C" {
    pub fn sodium_runtime_has_neon() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sodium_runtime_has_sse2() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sodium_runtime_has_sse3() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sodium_runtime_has_ssse3() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sodium_runtime_has_sse41() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sodium_runtime_has_avx() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sodium_runtime_has_avx2() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sodium_runtime_has_pclmul() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sodium_runtime_has_aesni() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _sodium_runtime_get_cpu_features() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sodium_memzero(pnt: *const ::std::os::raw::c_void, len: usize);
}
extern "C" {
    pub fn sodium_memcmp(b1_: *const ::std::os::raw::c_void,
                         b2_: *const ::std::os::raw::c_void, len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sodium_compare(b1_: *const ::std::os::raw::c_uchar,
                          b2_: *const ::std::os::raw::c_uchar, len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sodium_is_zero(n: *const ::std::os::raw::c_uchar, nlen: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sodium_increment(n: *mut ::std::os::raw::c_uchar, nlen: usize);
}
extern "C" {
    pub fn sodium_add(a: *mut ::std::os::raw::c_uchar,
                      b: *const ::std::os::raw::c_uchar, len: usize);
}
extern "C" {
    pub fn sodium_bin2hex(hex: *const ::std::os::raw::c_char,
                          hex_maxlen: usize,
                          bin: *const ::std::os::raw::c_uchar, bin_len: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn sodium_hex2bin(bin: *const ::std::os::raw::c_uchar,
                          bin_maxlen: usize,
                          hex: *const ::std::os::raw::c_char, hex_len: usize,
                          ignore: *const ::std::os::raw::c_char,
                          bin_len: *const usize,
                          hex_end: *const *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sodium_mlock(addr: *const ::std::os::raw::c_void, len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sodium_munlock(addr: *const ::std::os::raw::c_void, len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sodium_malloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sodium_allocarray(count: usize, size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sodium_free(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn sodium_mprotect_noaccess(ptr: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sodium_mprotect_readonly(ptr: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sodium_mprotect_readwrite(ptr: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _sodium_alloc_init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_curve25519xchacha20poly1305_seedbytes() -> usize;
}
extern "C" {
    pub fn crypto_box_curve25519xchacha20poly1305_publickeybytes() -> usize;
}
extern "C" {
    pub fn crypto_box_curve25519xchacha20poly1305_secretkeybytes() -> usize;
}
extern "C" {
    pub fn crypto_box_curve25519xchacha20poly1305_beforenmbytes() -> usize;
}
extern "C" {
    pub fn crypto_box_curve25519xchacha20poly1305_noncebytes() -> usize;
}
extern "C" {
    pub fn crypto_box_curve25519xchacha20poly1305_macbytes() -> usize;
}
extern "C" {
    pub fn crypto_box_curve25519xchacha20poly1305_seed_keypair(pk:
                                                                   *mut ::std::os::raw::c_uchar,
                                                               sk:
                                                                   *mut ::std::os::raw::c_uchar,
                                                               seed:
                                                                   *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_curve25519xchacha20poly1305_keypair(pk:
                                                              *mut ::std::os::raw::c_uchar,
                                                          sk:
                                                              *mut ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_curve25519xchacha20poly1305_easy(c:
                                                           *mut ::std::os::raw::c_uchar,
                                                       m:
                                                           *const ::std::os::raw::c_uchar,
                                                       mlen:
                                                           ::std::os::raw::c_ulonglong,
                                                       n:
                                                           *const ::std::os::raw::c_uchar,
                                                       pk:
                                                           *const ::std::os::raw::c_uchar,
                                                       sk:
                                                           *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_curve25519xchacha20poly1305_open_easy(m:
                                                                *mut ::std::os::raw::c_uchar,
                                                            c:
                                                                *const ::std::os::raw::c_uchar,
                                                            clen:
                                                                ::std::os::raw::c_ulonglong,
                                                            n:
                                                                *const ::std::os::raw::c_uchar,
                                                            pk:
                                                                *const ::std::os::raw::c_uchar,
                                                            sk:
                                                                *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_curve25519xchacha20poly1305_detached(c:
                                                               *mut ::std::os::raw::c_uchar,
                                                           mac:
                                                               *mut ::std::os::raw::c_uchar,
                                                           m:
                                                               *const ::std::os::raw::c_uchar,
                                                           mlen:
                                                               ::std::os::raw::c_ulonglong,
                                                           n:
                                                               *const ::std::os::raw::c_uchar,
                                                           pk:
                                                               *const ::std::os::raw::c_uchar,
                                                           sk:
                                                               *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_curve25519xchacha20poly1305_open_detached(m:
                                                                    *mut ::std::os::raw::c_uchar,
                                                                c:
                                                                    *const ::std::os::raw::c_uchar,
                                                                mac:
                                                                    *const ::std::os::raw::c_uchar,
                                                                clen:
                                                                    ::std::os::raw::c_ulonglong,
                                                                n:
                                                                    *const ::std::os::raw::c_uchar,
                                                                pk:
                                                                    *const ::std::os::raw::c_uchar,
                                                                sk:
                                                                    *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_curve25519xchacha20poly1305_beforenm(k:
                                                               *mut ::std::os::raw::c_uchar,
                                                           pk:
                                                               *const ::std::os::raw::c_uchar,
                                                           sk:
                                                               *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_curve25519xchacha20poly1305_easy_afternm(c:
                                                                   *mut ::std::os::raw::c_uchar,
                                                               m:
                                                                   *const ::std::os::raw::c_uchar,
                                                               mlen:
                                                                   ::std::os::raw::c_ulonglong,
                                                               n:
                                                                   *const ::std::os::raw::c_uchar,
                                                               k:
                                                                   *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_curve25519xchacha20poly1305_open_easy_afternm(m:
                                                                        *mut ::std::os::raw::c_uchar,
                                                                    c:
                                                                        *const ::std::os::raw::c_uchar,
                                                                    clen:
                                                                        ::std::os::raw::c_ulonglong,
                                                                    n:
                                                                        *const ::std::os::raw::c_uchar,
                                                                    k:
                                                                        *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_curve25519xchacha20poly1305_detached_afternm(c:
                                                                       *mut ::std::os::raw::c_uchar,
                                                                   mac:
                                                                       *mut ::std::os::raw::c_uchar,
                                                                   m:
                                                                       *const ::std::os::raw::c_uchar,
                                                                   mlen:
                                                                       ::std::os::raw::c_ulonglong,
                                                                   n:
                                                                       *const ::std::os::raw::c_uchar,
                                                                   k:
                                                                       *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_box_curve25519xchacha20poly1305_open_detached_afternm(m:
                                                                            *mut ::std::os::raw::c_uchar,
                                                                        c:
                                                                            *const ::std::os::raw::c_uchar,
                                                                        mac:
                                                                            *const ::std::os::raw::c_uchar,
                                                                        clen:
                                                                            ::std::os::raw::c_ulonglong,
                                                                        n:
                                                                            *const ::std::os::raw::c_uchar,
                                                                        k:
                                                                            *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_secretbox_xchacha20poly1305_keybytes() -> usize;
}
extern "C" {
    pub fn crypto_secretbox_xchacha20poly1305_noncebytes() -> usize;
}
extern "C" {
    pub fn crypto_secretbox_xchacha20poly1305_macbytes() -> usize;
}
extern "C" {
    pub fn crypto_secretbox_xchacha20poly1305_easy(c:
                                                       *mut ::std::os::raw::c_uchar,
                                                   m:
                                                       *const ::std::os::raw::c_uchar,
                                                   mlen:
                                                       ::std::os::raw::c_ulonglong,
                                                   n:
                                                       *const ::std::os::raw::c_uchar,
                                                   k:
                                                       *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_secretbox_xchacha20poly1305_open_easy(m:
                                                            *mut ::std::os::raw::c_uchar,
                                                        c:
                                                            *const ::std::os::raw::c_uchar,
                                                        clen:
                                                            ::std::os::raw::c_ulonglong,
                                                        n:
                                                            *const ::std::os::raw::c_uchar,
                                                        k:
                                                            *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_secretbox_xchacha20poly1305_detached(c:
                                                           *mut ::std::os::raw::c_uchar,
                                                       mac:
                                                           *mut ::std::os::raw::c_uchar,
                                                       m:
                                                           *const ::std::os::raw::c_uchar,
                                                       mlen:
                                                           ::std::os::raw::c_ulonglong,
                                                       n:
                                                           *const ::std::os::raw::c_uchar,
                                                       k:
                                                           *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_secretbox_xchacha20poly1305_open_detached(m:
                                                                *mut ::std::os::raw::c_uchar,
                                                            c:
                                                                *const ::std::os::raw::c_uchar,
                                                            mac:
                                                                *const ::std::os::raw::c_uchar,
                                                            clen:
                                                                ::std::os::raw::c_ulonglong,
                                                            n:
                                                                *const ::std::os::raw::c_uchar,
                                                            k:
                                                                *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_stream_aes128ctr_keybytes() -> usize;
}
extern "C" {
    pub fn crypto_stream_aes128ctr_noncebytes() -> usize;
}
extern "C" {
    pub fn crypto_stream_aes128ctr_beforenmbytes() -> usize;
}
extern "C" {
    pub fn crypto_stream_aes128ctr(out: *mut ::std::os::raw::c_uchar,
                                   outlen: ::std::os::raw::c_ulonglong,
                                   n: *const ::std::os::raw::c_uchar,
                                   k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_stream_aes128ctr_xor(out: *mut ::std::os::raw::c_uchar,
                                       in_: *const ::std::os::raw::c_uchar,
                                       inlen: ::std::os::raw::c_ulonglong,
                                       n: *const ::std::os::raw::c_uchar,
                                       k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_stream_aes128ctr_beforenm(c: *mut ::std::os::raw::c_uchar,
                                            k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_stream_aes128ctr_afternm(out: *mut ::std::os::raw::c_uchar,
                                           len: ::std::os::raw::c_ulonglong,
                                           nonce:
                                               *const ::std::os::raw::c_uchar,
                                           c: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_stream_aes128ctr_xor_afternm(out:
                                                   *mut ::std::os::raw::c_uchar,
                                               in_:
                                                   *const ::std::os::raw::c_uchar,
                                               len:
                                                   ::std::os::raw::c_ulonglong,
                                               nonce:
                                                   *const ::std::os::raw::c_uchar,
                                               c:
                                                   *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_stream_salsa2012_keybytes() -> usize;
}
extern "C" {
    pub fn crypto_stream_salsa2012_noncebytes() -> usize;
}
extern "C" {
    pub fn crypto_stream_salsa2012(c: *mut ::std::os::raw::c_uchar,
                                   clen: ::std::os::raw::c_ulonglong,
                                   n: *const ::std::os::raw::c_uchar,
                                   k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_stream_salsa2012_xor(c: *mut ::std::os::raw::c_uchar,
                                       m: *const ::std::os::raw::c_uchar,
                                       mlen: ::std::os::raw::c_ulonglong,
                                       n: *const ::std::os::raw::c_uchar,
                                       k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_stream_salsa2012_keygen(k: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn crypto_stream_salsa208_keybytes() -> usize;
}
extern "C" {
    pub fn crypto_stream_salsa208_noncebytes() -> usize;
}
extern "C" {
    pub fn crypto_stream_salsa208(c: *mut ::std::os::raw::c_uchar,
                                  clen: ::std::os::raw::c_ulonglong,
                                  n: *const ::std::os::raw::c_uchar,
                                  k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_stream_salsa208_xor(c: *mut ::std::os::raw::c_uchar,
                                      m: *const ::std::os::raw::c_uchar,
                                      mlen: ::std::os::raw::c_ulonglong,
                                      n: *const ::std::os::raw::c_uchar,
                                      k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_stream_salsa208_keygen(k: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn crypto_stream_xchacha20_keybytes() -> usize;
}
extern "C" {
    pub fn crypto_stream_xchacha20_noncebytes() -> usize;
}
extern "C" {
    pub fn crypto_stream_xchacha20(c: *mut ::std::os::raw::c_uchar,
                                   clen: ::std::os::raw::c_ulonglong,
                                   n: *const ::std::os::raw::c_uchar,
                                   k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_stream_xchacha20_xor(c: *mut ::std::os::raw::c_uchar,
                                       m: *const ::std::os::raw::c_uchar,
                                       mlen: ::std::os::raw::c_ulonglong,
                                       n: *const ::std::os::raw::c_uchar,
                                       k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_stream_xchacha20_xor_ic(c: *mut ::std::os::raw::c_uchar,
                                          m: *const ::std::os::raw::c_uchar,
                                          mlen: ::std::os::raw::c_ulonglong,
                                          n: *const ::std::os::raw::c_uchar,
                                          ic: u64,
                                          k: *const ::std::os::raw::c_uchar)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn crypto_stream_xchacha20_keygen(k: *mut ::std::os::raw::c_uchar);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(::std::mem::size_of::<__va_list_tag>() , 24usize , concat ! (
               "Size of: " , stringify ! ( __va_list_tag ) ));
    assert_eq! (::std::mem::align_of::<__va_list_tag>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __va_list_tag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . gp_offset as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( gp_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . fp_offset as * const
                _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( fp_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . overflow_arg_area as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( overflow_arg_area ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . reg_save_area as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( reg_save_area ) ));
}
impl Clone for __va_list_tag {
    fn clone(&self) -> Self { *self }
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
